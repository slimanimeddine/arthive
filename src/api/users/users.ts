/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ListUsers200,
  ListUsersParams,
  ShowAuthenticatedUser200,
  ShowAuthenticatedUser401,
  ShowUser200,
  ShowUser404,
  ShowUserById200,
  UpdateAuthenticatedUser200,
  UpdateAuthenticatedUser401,
  UpdateAuthenticatedUser403,
  UpdateAuthenticatedUserBody,
} from '.././model'

/**
 * Retrieve a list of all users
 * @summary List Users
 */
export const listUsers = (
  params?: ListUsersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListUsers200>> => {
  return axios.get(`/api/v1/users`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListUsersQueryKey = (params?: ListUsersParams) => {
  return [`/api/v1/users`, ...(params ? [params] : [])] as const
}

export const getListUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
    signal,
  }) => listUsers(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUsers>>
>
export type ListUsersQueryError = AxiosError<unknown>

export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Users
 */

export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListUsersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve a single user by id
 * @summary Show User By Id
 */
export const showUserById = (
  userId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShowUserById200>> => {
  return axios.get(`/api/v1/users/${userId}`, options)
}

export const getShowUserByIdQueryKey = (userId: number) => {
  return [`/api/v1/users/${userId}`] as const
}

export const getShowUserByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof showUserById>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getShowUserByIdQueryKey(userId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof showUserById>>> = ({
    signal,
  }) => showUserById(userId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof showUserById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ShowUserByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof showUserById>>
>
export type ShowUserByIdQueryError = AxiosError<unknown>

export function useShowUserById<
  TData = Awaited<ReturnType<typeof showUserById>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUserById>>,
          TError,
          Awaited<ReturnType<typeof showUserById>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowUserById<
  TData = Awaited<ReturnType<typeof showUserById>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUserById>>,
          TError,
          Awaited<ReturnType<typeof showUserById>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowUserById<
  TData = Awaited<ReturnType<typeof showUserById>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Show User By Id
 */

export function useShowUserById<
  TData = Awaited<ReturnType<typeof showUserById>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUserById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShowUserByIdQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve the currently authenticated user
 * @summary Show Authenticated User
 */
export const showAuthenticatedUser = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShowAuthenticatedUser200>> => {
  return axios.get(`/api/v1/users/me`, options)
}

export const getShowAuthenticatedUserQueryKey = () => {
  return [`/api/v1/users/me`] as const
}

export const getShowAuthenticatedUserQueryOptions = <
  TData = Awaited<ReturnType<typeof showAuthenticatedUser>>,
  TError = AxiosError<ShowAuthenticatedUser401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof showAuthenticatedUser>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getShowAuthenticatedUserQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof showAuthenticatedUser>>
  > = ({ signal }) => showAuthenticatedUser({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof showAuthenticatedUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ShowAuthenticatedUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof showAuthenticatedUser>>
>
export type ShowAuthenticatedUserQueryError =
  AxiosError<ShowAuthenticatedUser401>

export function useShowAuthenticatedUser<
  TData = Awaited<ReturnType<typeof showAuthenticatedUser>>,
  TError = AxiosError<ShowAuthenticatedUser401>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof showAuthenticatedUser>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof showAuthenticatedUser>>,
        TError,
        Awaited<ReturnType<typeof showAuthenticatedUser>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowAuthenticatedUser<
  TData = Awaited<ReturnType<typeof showAuthenticatedUser>>,
  TError = AxiosError<ShowAuthenticatedUser401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof showAuthenticatedUser>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof showAuthenticatedUser>>,
        TError,
        Awaited<ReturnType<typeof showAuthenticatedUser>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowAuthenticatedUser<
  TData = Awaited<ReturnType<typeof showAuthenticatedUser>>,
  TError = AxiosError<ShowAuthenticatedUser401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof showAuthenticatedUser>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Show Authenticated User
 */

export function useShowAuthenticatedUser<
  TData = Awaited<ReturnType<typeof showAuthenticatedUser>>,
  TError = AxiosError<ShowAuthenticatedUser401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof showAuthenticatedUser>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShowAuthenticatedUserQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update the currently authenticated user
 * @summary Update Authenticated User
 */
export const updateAuthenticatedUser = (
  updateAuthenticatedUserBody?: UpdateAuthenticatedUserBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UpdateAuthenticatedUser200>> => {
  const formData = new FormData()
  if (updateAuthenticatedUserBody?.username !== undefined) {
    formData.append('username', updateAuthenticatedUserBody.username)
  }
  if (updateAuthenticatedUserBody?.first_name !== undefined) {
    formData.append('first_name', updateAuthenticatedUserBody.first_name)
  }
  if (updateAuthenticatedUserBody?.last_name !== undefined) {
    formData.append('last_name', updateAuthenticatedUserBody.last_name)
  }
  if (updateAuthenticatedUserBody?.email !== undefined) {
    formData.append('email', updateAuthenticatedUserBody.email)
  }
  if (updateAuthenticatedUserBody?.country !== undefined) {
    formData.append('country', updateAuthenticatedUserBody.country)
  }
  if (updateAuthenticatedUserBody?.bio !== undefined) {
    formData.append('bio', updateAuthenticatedUserBody.bio)
  }
  if (updateAuthenticatedUserBody?.photo !== undefined) {
    formData.append('photo', updateAuthenticatedUserBody.photo)
  }

  return axios.post(`/api/v1/users/me`, formData, options)
}

export const getUpdateAuthenticatedUserMutationOptions = <
  TError = AxiosError<UpdateAuthenticatedUser401 | UpdateAuthenticatedUser403>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAuthenticatedUser>>,
    TError,
    { data: UpdateAuthenticatedUserBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAuthenticatedUser>>,
  TError,
  { data: UpdateAuthenticatedUserBody },
  TContext
> => {
  const mutationKey = ['updateAuthenticatedUser']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAuthenticatedUser>>,
    { data: UpdateAuthenticatedUserBody }
  > = (props) => {
    const { data } = props ?? {}

    return updateAuthenticatedUser(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAuthenticatedUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAuthenticatedUser>>
>
export type UpdateAuthenticatedUserMutationBody = UpdateAuthenticatedUserBody
export type UpdateAuthenticatedUserMutationError = AxiosError<
  UpdateAuthenticatedUser401 | UpdateAuthenticatedUser403
>

/**
 * @summary Update Authenticated User
 */
export const useUpdateAuthenticatedUser = <
  TError = AxiosError<UpdateAuthenticatedUser401 | UpdateAuthenticatedUser403>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAuthenticatedUser>>,
    TError,
    { data: UpdateAuthenticatedUserBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAuthenticatedUser>>,
  TError,
  { data: UpdateAuthenticatedUserBody },
  TContext
> => {
  const mutationOptions = getUpdateAuthenticatedUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Retrieve a single user by username
 * @summary Show User
 */
export const showUser = (
  username: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShowUser200>> => {
  return axios.get(`/api/v1/users/${username}`, options)
}

export const getShowUserQueryKey = (username: string) => {
  return [`/api/v1/users/${username}`] as const
}

export const getShowUserQueryOptions = <
  TData = Awaited<ReturnType<typeof showUser>>,
  TError = AxiosError<ShowUser404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getShowUserQueryKey(username)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof showUser>>> = ({
    signal,
  }) => showUser(username, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }
}

export type ShowUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof showUser>>
>
export type ShowUserQueryError = AxiosError<ShowUser404>

export function useShowUser<
  TData = Awaited<ReturnType<typeof showUser>>,
  TError = AxiosError<ShowUser404>,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUser>>,
          TError,
          Awaited<ReturnType<typeof showUser>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowUser<
  TData = Awaited<ReturnType<typeof showUser>>,
  TError = AxiosError<ShowUser404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUser>>,
          TError,
          Awaited<ReturnType<typeof showUser>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowUser<
  TData = Awaited<ReturnType<typeof showUser>>,
  TError = AxiosError<ShowUser404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Show User
 */

export function useShowUser<
  TData = Awaited<ReturnType<typeof showUser>>,
  TError = AxiosError<ShowUser404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showUser>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShowUserQueryOptions(username, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
