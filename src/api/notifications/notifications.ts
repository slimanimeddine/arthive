/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ListAuthenticatedUserNotifications200,
  ListAuthenticatedUserNotifications400,
  ListAuthenticatedUserNotifications401,
  ListAuthenticatedUserNotificationsParams,
  MarkAllNotificationsAsRead200,
  MarkAllNotificationsAsRead401,
  MarkNotificationAsRead200,
  MarkNotificationAsRead401,
  MarkNotificationAsRead404,
} from '.././model'

/**
 * Retrieve a list of authenticated user notifications
 * @summary List authenticated user notifications
 */
export const listAuthenticatedUserNotifications = (
  params?: ListAuthenticatedUserNotificationsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAuthenticatedUserNotifications200>> => {
  return axios.get(`/api/v1/users/me/notifications`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAuthenticatedUserNotificationsQueryKey = (
  params?: ListAuthenticatedUserNotificationsParams
) => {
  return [
    `/api/v1/users/me/notifications`,
    ...(params ? [params] : []),
  ] as const
}

export const getListAuthenticatedUserNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
  TError = AxiosError<
    | ListAuthenticatedUserNotifications400
    | ListAuthenticatedUserNotifications401
  >,
>(
  params?: ListAuthenticatedUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getListAuthenticatedUserNotificationsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>
  > = ({ signal }) =>
    listAuthenticatedUserNotifications(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListAuthenticatedUserNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>
>
export type ListAuthenticatedUserNotificationsQueryError = AxiosError<
  ListAuthenticatedUserNotifications400 | ListAuthenticatedUserNotifications401
>

export function useListAuthenticatedUserNotifications<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
  TError = AxiosError<
    | ListAuthenticatedUserNotifications400
    | ListAuthenticatedUserNotifications401
  >,
>(
  params: undefined | ListAuthenticatedUserNotificationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserNotifications<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
  TError = AxiosError<
    | ListAuthenticatedUserNotifications400
    | ListAuthenticatedUserNotifications401
  >,
>(
  params?: ListAuthenticatedUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserNotifications<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
  TError = AxiosError<
    | ListAuthenticatedUserNotifications400
    | ListAuthenticatedUserNotifications401
  >,
>(
  params?: ListAuthenticatedUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List authenticated user notifications
 */

export function useListAuthenticatedUserNotifications<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
  TError = AxiosError<
    | ListAuthenticatedUserNotifications400
    | ListAuthenticatedUserNotifications401
  >,
>(
  params?: ListAuthenticatedUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserNotifications>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListAuthenticatedUserNotificationsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Mark a specific notification as read
 * @summary Mark notification as read
 */
export const markNotificationAsRead = (
  notificationId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MarkNotificationAsRead200>> => {
  return axios.put(
    `/api/v1/users/me/notifications/unread/${notificationId}`,
    undefined,
    options
  )
}

export const getMarkNotificationAsReadMutationOptions = <
  TError = AxiosError<MarkNotificationAsRead401 | MarkNotificationAsRead404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markNotificationAsRead>>,
    TError,
    { notificationId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof markNotificationAsRead>>,
  TError,
  { notificationId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof markNotificationAsRead>>,
    { notificationId: string }
  > = (props) => {
    const { notificationId } = props ?? {}

    return markNotificationAsRead(notificationId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type MarkNotificationAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof markNotificationAsRead>>
>

export type MarkNotificationAsReadMutationError = AxiosError<
  MarkNotificationAsRead401 | MarkNotificationAsRead404
>

/**
 * @summary Mark notification as read
 */
export const useMarkNotificationAsRead = <
  TError = AxiosError<MarkNotificationAsRead401 | MarkNotificationAsRead404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markNotificationAsRead>>,
    TError,
    { notificationId: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof markNotificationAsRead>>,
  TError,
  { notificationId: string },
  TContext
> => {
  const mutationOptions = getMarkNotificationAsReadMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Mark all authenticated user notifications as read
 * @summary Mark all notifications as read
 */
export const markAllNotificationsAsRead = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MarkAllNotificationsAsRead200>> => {
  return axios.put(`/api/v1/users/me/notifications/unread`, undefined, options)
}

export const getMarkAllNotificationsAsReadMutationOptions = <
  TError = AxiosError<MarkAllNotificationsAsRead401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markAllNotificationsAsRead>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof markAllNotificationsAsRead>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof markAllNotificationsAsRead>>,
    void
  > = () => {
    return markAllNotificationsAsRead(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type MarkAllNotificationsAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof markAllNotificationsAsRead>>
>

export type MarkAllNotificationsAsReadMutationError =
  AxiosError<MarkAllNotificationsAsRead401>

/**
 * @summary Mark all notifications as read
 */
export const useMarkAllNotificationsAsRead = <
  TError = AxiosError<MarkAllNotificationsAsRead401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markAllNotificationsAsRead>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof markAllNotificationsAsRead>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMarkAllNotificationsAsReadMutationOptions(options)

  return useMutation(mutationOptions)
}
