/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type { ListCountries200 } from '.././model'

/**
 * Retrieve a list of countries
 * @summary List Countries
 */
export const listCountries = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListCountries200>> => {
  return axios.get(`/api/v1/countries`, options)
}

export const getListCountriesQueryKey = () => {
  return [`/api/v1/countries`] as const
}

export const getListCountriesQueryOptions = <
  TData = Awaited<ReturnType<typeof listCountries>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCountries>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListCountriesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCountries>>> = ({
    signal,
  }) => listCountries({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listCountries>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListCountriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listCountries>>
>
export type ListCountriesQueryError = AxiosError<unknown>

export function useListCountries<
  TData = Awaited<ReturnType<typeof listCountries>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCountries>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listCountries>>,
        TError,
        Awaited<ReturnType<typeof listCountries>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListCountries<
  TData = Awaited<ReturnType<typeof listCountries>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCountries>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listCountries>>,
        TError,
        Awaited<ReturnType<typeof listCountries>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListCountries<
  TData = Awaited<ReturnType<typeof listCountries>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCountries>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Countries
 */

export function useListCountries<
  TData = Awaited<ReturnType<typeof listCountries>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCountries>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListCountriesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
