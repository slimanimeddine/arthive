/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ListArtistVerificationRequests200,
  ListArtistVerificationRequests401,
  ListArtistVerificationRequestsParams,
  ReviewArtistVerificationRequest200,
  ReviewArtistVerificationRequest401,
  ReviewArtistVerificationRequest403,
  ReviewArtistVerificationRequest404,
  ReviewArtistVerificationRequestBody,
  SubmitArtistVerificationRequest200,
  SubmitArtistVerificationRequest400,
  SubmitArtistVerificationRequest401,
  SubmitArtistVerificationRequest403,
} from '.././model'

/**
 * Retrieve a list of artist verification requests submitted by artists.
 * @summary List Artist Verification Requests
 */
export const listArtistVerificationRequests = (
  params?: ListArtistVerificationRequestsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListArtistVerificationRequests200>> => {
  return axios.get(`/api/v1/artist-verification-requests`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListArtistVerificationRequestsQueryKey = (
  params?: ListArtistVerificationRequestsParams
) => {
  return [
    `/api/v1/artist-verification-requests`,
    ...(params ? [params] : []),
  ] as const
}

export const getListArtistVerificationRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof listArtistVerificationRequests>>,
  TError = AxiosError<ListArtistVerificationRequests401>,
>(
  params?: ListArtistVerificationRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listArtistVerificationRequests>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListArtistVerificationRequestsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listArtistVerificationRequests>>
  > = ({ signal }) =>
    listArtistVerificationRequests(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listArtistVerificationRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListArtistVerificationRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listArtistVerificationRequests>>
>
export type ListArtistVerificationRequestsQueryError =
  AxiosError<ListArtistVerificationRequests401>

export function useListArtistVerificationRequests<
  TData = Awaited<ReturnType<typeof listArtistVerificationRequests>>,
  TError = AxiosError<ListArtistVerificationRequests401>,
>(
  params: undefined | ListArtistVerificationRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listArtistVerificationRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listArtistVerificationRequests>>,
          TError,
          Awaited<ReturnType<typeof listArtistVerificationRequests>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListArtistVerificationRequests<
  TData = Awaited<ReturnType<typeof listArtistVerificationRequests>>,
  TError = AxiosError<ListArtistVerificationRequests401>,
>(
  params?: ListArtistVerificationRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listArtistVerificationRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listArtistVerificationRequests>>,
          TError,
          Awaited<ReturnType<typeof listArtistVerificationRequests>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListArtistVerificationRequests<
  TData = Awaited<ReturnType<typeof listArtistVerificationRequests>>,
  TError = AxiosError<ListArtistVerificationRequests401>,
>(
  params?: ListArtistVerificationRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listArtistVerificationRequests>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Artist Verification Requests
 */

export function useListArtistVerificationRequests<
  TData = Awaited<ReturnType<typeof listArtistVerificationRequests>>,
  TError = AxiosError<ListArtistVerificationRequests401>,
>(
  params?: ListArtistVerificationRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listArtistVerificationRequests>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListArtistVerificationRequestsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Submits an artist verification request
 * @summary Submit Artist Verification Request
 */
export const submitArtistVerificationRequest = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SubmitArtistVerificationRequest200>> => {
  return axios.post(
    `/api/v1/users/me/artist-verification-requests`,
    undefined,
    options
  )
}

export const getSubmitArtistVerificationRequestMutationOptions = <
  TError = AxiosError<
    | SubmitArtistVerificationRequest400
    | SubmitArtistVerificationRequest401
    | SubmitArtistVerificationRequest403
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitArtistVerificationRequest>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitArtistVerificationRequest>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['submitArtistVerificationRequest']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitArtistVerificationRequest>>,
    void
  > = () => {
    return submitArtistVerificationRequest(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SubmitArtistVerificationRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitArtistVerificationRequest>>
>

export type SubmitArtistVerificationRequestMutationError = AxiosError<
  | SubmitArtistVerificationRequest400
  | SubmitArtistVerificationRequest401
  | SubmitArtistVerificationRequest403
>

/**
 * @summary Submit Artist Verification Request
 */
export const useSubmitArtistVerificationRequest = <
  TError = AxiosError<
    | SubmitArtistVerificationRequest400
    | SubmitArtistVerificationRequest401
    | SubmitArtistVerificationRequest403
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitArtistVerificationRequest>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof submitArtistVerificationRequest>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getSubmitArtistVerificationRequestMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Reviews an artist verification request
 * @summary Review Artist Verification Request
 */
export const reviewArtistVerificationRequest = (
  artistVerificationRequestId: string,
  reviewArtistVerificationRequestBody?: ReviewArtistVerificationRequestBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReviewArtistVerificationRequest200>> => {
  return axios.put(
    `/api/v1/artist-verification-requests/${artistVerificationRequestId}`,
    reviewArtistVerificationRequestBody,
    options
  )
}

export const getReviewArtistVerificationRequestMutationOptions = <
  TError = AxiosError<
    | ReviewArtistVerificationRequest401
    | ReviewArtistVerificationRequest403
    | ReviewArtistVerificationRequest404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewArtistVerificationRequest>>,
    TError,
    {
      artistVerificationRequestId: string
      data: ReviewArtistVerificationRequestBody
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewArtistVerificationRequest>>,
  TError,
  {
    artistVerificationRequestId: string
    data: ReviewArtistVerificationRequestBody
  },
  TContext
> => {
  const mutationKey = ['reviewArtistVerificationRequest']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewArtistVerificationRequest>>,
    {
      artistVerificationRequestId: string
      data: ReviewArtistVerificationRequestBody
    }
  > = (props) => {
    const { artistVerificationRequestId, data } = props ?? {}

    return reviewArtistVerificationRequest(
      artistVerificationRequestId,
      data,
      axiosOptions
    )
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewArtistVerificationRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewArtistVerificationRequest>>
>
export type ReviewArtistVerificationRequestMutationBody =
  ReviewArtistVerificationRequestBody
export type ReviewArtistVerificationRequestMutationError = AxiosError<
  | ReviewArtistVerificationRequest401
  | ReviewArtistVerificationRequest403
  | ReviewArtistVerificationRequest404
>

/**
 * @summary Review Artist Verification Request
 */
export const useReviewArtistVerificationRequest = <
  TError = AxiosError<
    | ReviewArtistVerificationRequest401
    | ReviewArtistVerificationRequest403
    | ReviewArtistVerificationRequest404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewArtistVerificationRequest>>,
    TError,
    {
      artistVerificationRequestId: string
      data: ReviewArtistVerificationRequestBody
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof reviewArtistVerificationRequest>>,
  TError,
  {
    artistVerificationRequestId: string
    data: ReviewArtistVerificationRequestBody
  },
  TContext
> => {
  const mutationOptions =
    getReviewArtistVerificationRequestMutationOptions(options)

  return useMutation(mutationOptions)
}
