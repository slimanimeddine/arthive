/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AdminSignIn200,
  AdminSignIn401,
  AdminSignInBody,
  ChangePassword200,
  ChangePassword401,
  ChangePassword422,
  ChangePasswordBody,
  SendEmailVerificationCode200,
  SendEmailVerificationCode400,
  SendEmailVerificationCode401,
  SignIn200,
  SignIn401,
  SignInBody,
  SignOut200,
  SignOut401,
  SignUp200,
  SignUpBody,
  VerifyEmailCode200,
  VerifyEmailCode400,
  VerifyEmailCode401,
  VerifyEmailCodeBody,
} from '.././model'

/**
 * Creates a new user
 * @summary Sign Up
 */
export const signUp = (
  signUpBody: SignUpBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignUp200>> => {
  return axios.post(`/api/v1/sign-up`, signUpBody, options)
}

export const getSignUpMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUp>>,
    TError,
    { data: SignUpBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpBody },
  TContext
> => {
  const mutationKey = ['signUp']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUp>>,
    { data: SignUpBody }
  > = (props) => {
    const { data } = props ?? {}

    return signUp(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUp>>
>
export type SignUpMutationBody = SignUpBody
export type SignUpMutationError = AxiosError<unknown>

/**
 * @summary Sign Up
 */
export const useSignUp = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUp>>,
    TError,
    { data: SignUpBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpBody },
  TContext
> => {
  const mutationOptions = getSignUpMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs in a user and returns an auth token
 * @summary Sign In
 */
export const signIn = (
  signInBody: SignInBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignIn200>> => {
  return axios.post(`/api/v1/sign-in`, signInBody, options)
}

export const getSignInMutationOptions = <
  TError = AxiosError<SignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signIn>>,
    TError,
    { data: SignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInBody },
  TContext
> => {
  const mutationKey = ['signIn']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signIn>>,
    { data: SignInBody }
  > = (props) => {
    const { data } = props ?? {}

    return signIn(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof signIn>>
>
export type SignInMutationBody = SignInBody
export type SignInMutationError = AxiosError<SignIn401>

/**
 * @summary Sign In
 */
export const useSignIn = <
  TError = AxiosError<SignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signIn>>,
    TError,
    { data: SignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInBody },
  TContext
> => {
  const mutationOptions = getSignInMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs out a user and deletes the auth token
 * @summary Sign Out
 */
export const signOut = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignOut200>> => {
  return axios.post(`/api/v1/sign-out`, undefined, options)
}

export const getSignOutMutationOptions = <
  TError = AxiosError<SignOut401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOut>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signOut>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['signOut']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signOut>>,
    void
  > = () => {
    return signOut(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof signOut>>
>

export type SignOutMutationError = AxiosError<SignOut401>

/**
 * @summary Sign Out
 */
export const useSignOut = <
  TError = AxiosError<SignOut401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOut>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signOut>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSignOutMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Changes the password of the authenticated user
 * @summary Change Password
 */
export const changePassword = (
  changePasswordBody: ChangePasswordBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ChangePassword200>> => {
  return axios.post(`/api/v1/change-password`, changePasswordBody, options)
}

export const getChangePasswordMutationOptions = <
  TError = AxiosError<ChangePassword401 | ChangePassword422>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordBody },
  TContext
> => {
  const mutationKey = ['changePassword']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordBody }
  > = (props) => {
    const { data } = props ?? {}

    return changePassword(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>
export type ChangePasswordMutationBody = ChangePasswordBody
export type ChangePasswordMutationError = AxiosError<
  ChangePassword401 | ChangePassword422
>

/**
 * @summary Change Password
 */
export const useChangePassword = <
  TError = AxiosError<ChangePassword401 | ChangePassword422>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordBody },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Sends a verification code to the authenticated user's email
 * @summary Send Email Verification Code
 */
export const sendEmailVerificationCode = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SendEmailVerificationCode200>> => {
  return axios.post(`/api/v1/email-verification/send`, undefined, options)
}

export const getSendEmailVerificationCodeMutationOptions = <
  TError = AxiosError<
    SendEmailVerificationCode400 | SendEmailVerificationCode401
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['sendEmailVerificationCode']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    void
  > = () => {
    return sendEmailVerificationCode(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SendEmailVerificationCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>
>

export type SendEmailVerificationCodeMutationError = AxiosError<
  SendEmailVerificationCode400 | SendEmailVerificationCode401
>

/**
 * @summary Send Email Verification Code
 */
export const useSendEmailVerificationCode = <
  TError = AxiosError<
    SendEmailVerificationCode400 | SendEmailVerificationCode401
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSendEmailVerificationCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Verifies the email verification code
 * @summary Verify Email Code
 */
export const verifyEmailCode = (
  verifyEmailCodeBody: VerifyEmailCodeBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<VerifyEmailCode200>> => {
  return axios.post(
    `/api/v1/email-verification/verify`,
    verifyEmailCodeBody,
    options
  )
}

export const getVerifyEmailCodeMutationOptions = <
  TError = AxiosError<VerifyEmailCode400 | VerifyEmailCode401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: VerifyEmailCodeBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: VerifyEmailCodeBody },
  TContext
> => {
  const mutationKey = ['verifyEmailCode']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: VerifyEmailCodeBody }
  > = (props) => {
    const { data } = props ?? {}

    return verifyEmailCode(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type VerifyEmailCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmailCode>>
>
export type VerifyEmailCodeMutationBody = VerifyEmailCodeBody
export type VerifyEmailCodeMutationError = AxiosError<
  VerifyEmailCode400 | VerifyEmailCode401
>

/**
 * @summary Verify Email Code
 */
export const useVerifyEmailCode = <
  TError = AxiosError<VerifyEmailCode400 | VerifyEmailCode401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: VerifyEmailCodeBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: VerifyEmailCodeBody },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs in an admin user and returns an auth token
 * @summary Admin Sign In
 */
export const adminSignIn = (
  adminSignInBody: AdminSignInBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AdminSignIn200>> => {
  return axios.post(`/api/v1/admin/sign-in`, adminSignInBody, options)
}

export const getAdminSignInMutationOptions = <
  TError = AxiosError<AdminSignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSignIn>>,
    TError,
    { data: AdminSignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminSignIn>>,
  TError,
  { data: AdminSignInBody },
  TContext
> => {
  const mutationKey = ['adminSignIn']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminSignIn>>,
    { data: AdminSignInBody }
  > = (props) => {
    const { data } = props ?? {}

    return adminSignIn(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminSignIn>>
>
export type AdminSignInMutationBody = AdminSignInBody
export type AdminSignInMutationError = AxiosError<AdminSignIn401>

/**
 * @summary Admin Sign In
 */
export const useAdminSignIn = <
  TError = AxiosError<AdminSignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSignIn>>,
    TError,
    { data: AdminSignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof adminSignIn>>,
  TError,
  { data: AdminSignInBody },
  TContext
> => {
  const mutationOptions = getAdminSignInMutationOptions(options)

  return useMutation(mutationOptions)
}
