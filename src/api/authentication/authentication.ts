/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  AdminSignIn200,
  AdminSignIn401,
  AdminSignInBody,
  ChangePassword200,
  ChangePassword401,
  ChangePasswordBody,
  ResendVerificationEmail200,
  ResendVerificationEmail401,
  ResetPassword200,
  ResetPassword500,
  ResetPasswordBody,
  SendResetPasswordLink200,
  SendResetPasswordLink500,
  SendResetPasswordLinkBody,
  SignIn200,
  SignIn401,
  SignInBody,
  SignOut200,
  SignOut401,
  SignUp200,
  SignUpBody,
  VerifyEmail200,
  VerifyEmail401,
} from '.././model'

/**
 * Creates a new user
 * @summary Sign Up
 */
export const signUp = (
  signUpBody: SignUpBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignUp200>> => {
  return axios.post(`/api/v1/sign-up`, signUpBody, options)
}

export const getSignUpMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUp>>,
    TError,
    { data: SignUpBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUp>>,
    { data: SignUpBody }
  > = (props) => {
    const { data } = props ?? {}

    return signUp(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUp>>
>
export type SignUpMutationBody = SignUpBody
export type SignUpMutationError = AxiosError<unknown>

/**
 * @summary Sign Up
 */
export const useSignUp = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUp>>,
    TError,
    { data: SignUpBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signUp>>,
  TError,
  { data: SignUpBody },
  TContext
> => {
  const mutationOptions = getSignUpMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs in a user and returns an auth token
 * @summary Sign In
 */
export const signIn = (
  signInBody: SignInBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignIn200>> => {
  return axios.post(`/api/v1/sign-in`, signInBody, options)
}

export const getSignInMutationOptions = <
  TError = AxiosError<SignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signIn>>,
    TError,
    { data: SignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signIn>>,
    { data: SignInBody }
  > = (props) => {
    const { data } = props ?? {}

    return signIn(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof signIn>>
>
export type SignInMutationBody = SignInBody
export type SignInMutationError = AxiosError<SignIn401>

/**
 * @summary Sign In
 */
export const useSignIn = <
  TError = AxiosError<SignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signIn>>,
    TError,
    { data: SignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signIn>>,
  TError,
  { data: SignInBody },
  TContext
> => {
  const mutationOptions = getSignInMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs out a user and deletes the auth token
 * @summary Sign Out
 */
export const signOut = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignOut200>> => {
  return axios.post(`/api/v1/sign-out`, undefined, options)
}

export const getSignOutMutationOptions = <
  TError = AxiosError<SignOut401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOut>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof signOut>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signOut>>,
    void
  > = () => {
    return signOut(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof signOut>>
>

export type SignOutMutationError = AxiosError<SignOut401>

/**
 * @summary Sign Out
 */
export const useSignOut = <
  TError = AxiosError<SignOut401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signOut>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof signOut>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSignOutMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Verifies the email of the authenticated user
 * @summary Verify Email
 */
export const verifyEmail = (
  id: string,
  hash: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<VerifyEmail200>> => {
  return axios.get(`/api/v1/email/verify/${id}/${hash}`, options)
}

export const getVerifyEmailQueryKey = (id: string, hash: string) => {
  return [`/api/v1/email/verify/${id}/${hash}`] as const
}

export const getVerifyEmailQueryOptions = <
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = AxiosError<VerifyEmail401>,
>(
  id: string,
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getVerifyEmailQueryKey(id, hash)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof verifyEmail>>> = ({
    signal,
  }) => verifyEmail(id, hash, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(id && hash),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof verifyEmail>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type VerifyEmailQueryResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmail>>
>
export type VerifyEmailQueryError = AxiosError<VerifyEmail401>

export function useVerifyEmail<
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = AxiosError<VerifyEmail401>,
>(
  id: string,
  hash: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyEmail>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useVerifyEmail<
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = AxiosError<VerifyEmail401>,
>(
  id: string,
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof verifyEmail>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useVerifyEmail<
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = AxiosError<VerifyEmail401>,
>(
  id: string,
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Verify Email
 */

export function useVerifyEmail<
  TData = Awaited<ReturnType<typeof verifyEmail>>,
  TError = AxiosError<VerifyEmail401>,
>(
  id: string,
  hash: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof verifyEmail>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getVerifyEmailQueryOptions(id, hash, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Resends the verification email to the authenticated user
 * @summary Resend Verification Email
 */
export const resendVerificationEmail = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ResendVerificationEmail200>> => {
  return axios.post(
    `/api/v1/email/verification-notification`,
    undefined,
    options
  )
}

export const getResendVerificationEmailMutationOptions = <
  TError = AxiosError<ResendVerificationEmail401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendVerificationEmail>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof resendVerificationEmail>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resendVerificationEmail>>,
    void
  > = () => {
    return resendVerificationEmail(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResendVerificationEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof resendVerificationEmail>>
>

export type ResendVerificationEmailMutationError =
  AxiosError<ResendVerificationEmail401>

/**
 * @summary Resend Verification Email
 */
export const useResendVerificationEmail = <
  TError = AxiosError<ResendVerificationEmail401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendVerificationEmail>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof resendVerificationEmail>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getResendVerificationEmailMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Sends a reset password link to the user's email
 * @summary Send Reset Password Link
 */
export const sendResetPasswordLink = (
  sendResetPasswordLinkBody: SendResetPasswordLinkBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SendResetPasswordLink200>> => {
  return axios.post(
    `/api/v1/forgot-password`,
    sendResetPasswordLinkBody,
    options
  )
}

export const getSendResetPasswordLinkMutationOptions = <
  TError = AxiosError<SendResetPasswordLink500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendResetPasswordLink>>,
    TError,
    { data: SendResetPasswordLinkBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendResetPasswordLink>>,
  TError,
  { data: SendResetPasswordLinkBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendResetPasswordLink>>,
    { data: SendResetPasswordLinkBody }
  > = (props) => {
    const { data } = props ?? {}

    return sendResetPasswordLink(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SendResetPasswordLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendResetPasswordLink>>
>
export type SendResetPasswordLinkMutationBody = SendResetPasswordLinkBody
export type SendResetPasswordLinkMutationError =
  AxiosError<SendResetPasswordLink500>

/**
 * @summary Send Reset Password Link
 */
export const useSendResetPasswordLink = <
  TError = AxiosError<SendResetPasswordLink500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendResetPasswordLink>>,
    TError,
    { data: SendResetPasswordLinkBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof sendResetPasswordLink>>,
  TError,
  { data: SendResetPasswordLinkBody },
  TContext
> => {
  const mutationOptions = getSendResetPasswordLinkMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Resets the password of the user
 * @summary Reset Password
 */
export const resetPassword = (
  resetPasswordBody: ResetPasswordBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ResetPassword200>> => {
  return axios.post(`/api/v1/reset-password`, resetPasswordBody, options)
}

export const getResetPasswordMutationOptions = <
  TError = AxiosError<ResetPassword500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: ResetPasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPasswordBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: ResetPasswordBody }
  > = (props) => {
    const { data } = props ?? {}

    return resetPassword(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetPassword>>
>
export type ResetPasswordMutationBody = ResetPasswordBody
export type ResetPasswordMutationError = AxiosError<ResetPassword500>

/**
 * @summary Reset Password
 */
export const useResetPassword = <
  TError = AxiosError<ResetPassword500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: ResetPasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPasswordBody },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Changes the password of the authenticated user
 * @summary Change Password
 */
export const changePassword = (
  changePasswordBody: ChangePasswordBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ChangePassword200>> => {
  return axios.post(`/api/v1/change-password`, changePasswordBody, options)
}

export const getChangePasswordMutationOptions = <
  TError = AxiosError<ChangePassword401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordBody }
  > = (props) => {
    const { data } = props ?? {}

    return changePassword(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>
export type ChangePasswordMutationBody = ChangePasswordBody
export type ChangePasswordMutationError = AxiosError<ChangePassword401>

/**
 * @summary Change Password
 */
export const useChangePassword = <
  TError = AxiosError<ChangePassword401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordBody },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Signs in an admin user and returns an auth token
 * @summary Admin Sign In
 */
export const adminSignIn = (
  adminSignInBody: AdminSignInBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AdminSignIn200>> => {
  return axios.post(`/api/v1/admin/sign-in`, adminSignInBody, options)
}

export const getAdminSignInMutationOptions = <
  TError = AxiosError<AdminSignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSignIn>>,
    TError,
    { data: AdminSignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminSignIn>>,
  TError,
  { data: AdminSignInBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminSignIn>>,
    { data: AdminSignInBody }
  > = (props) => {
    const { data } = props ?? {}

    return adminSignIn(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminSignIn>>
>
export type AdminSignInMutationBody = AdminSignInBody
export type AdminSignInMutationError = AxiosError<AdminSignIn401>

/**
 * @summary Admin Sign In
 */
export const useAdminSignIn = <
  TError = AxiosError<AdminSignIn401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSignIn>>,
    TError,
    { data: AdminSignInBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof adminSignIn>>,
  TError,
  { data: AdminSignInBody },
  TContext
> => {
  const mutationOptions = getAdminSignInMutationOptions(options)

  return useMutation(mutationOptions)
}
