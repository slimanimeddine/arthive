/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type { AuthenticateTheRequestForChannelAccess401 } from '.././model'

/**
 * @summary Authenticate the request for channel access.
 */
export const authenticateTheRequestForChannelAccess = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/broadcasting/auth`, options)
}

export const getAuthenticateTheRequestForChannelAccessQueryKey = () => {
  return [`/api/broadcasting/auth`] as const
}

export const getAuthenticateTheRequestForChannelAccessQueryOptions = <
  TData = Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
  TError = AxiosError<AuthenticateTheRequestForChannelAccess401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAuthenticateTheRequestForChannelAccessQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>
  > = ({ signal }) =>
    authenticateTheRequestForChannelAccess({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthenticateTheRequestForChannelAccessQueryResult = NonNullable<
  Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>
>
export type AuthenticateTheRequestForChannelAccessQueryError =
  AxiosError<AuthenticateTheRequestForChannelAccess401>

export function useAuthenticateTheRequestForChannelAccess<
  TData = Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
  TError = AxiosError<AuthenticateTheRequestForChannelAccess401>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
        TError,
        Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAuthenticateTheRequestForChannelAccess<
  TData = Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
  TError = AxiosError<AuthenticateTheRequestForChannelAccess401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
        TError,
        Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAuthenticateTheRequestForChannelAccess<
  TData = Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
  TError = AxiosError<AuthenticateTheRequestForChannelAccess401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Authenticate the request for channel access.
 */

export function useAuthenticateTheRequestForChannelAccess<
  TData = Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
  TError = AxiosError<AuthenticateTheRequestForChannelAccess401>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authenticateTheRequestForChannelAccess>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getAuthenticateTheRequestForChannelAccessQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
