/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  CreateArtwork200,
  CreateArtwork401,
  CreateArtwork403,
  CreateArtworkBody,
  DeleteArtwork401,
  DeleteArtwork403,
  DeleteArtwork404,
  ListAuthenticatedUserArtworks200,
  ListAuthenticatedUserArtworks401,
  ListAuthenticatedUserArtworksParams,
  ListPublishedArtworks200,
  ListPublishedArtworksParams,
  ListUserPublishedArtworks200,
  ListUserPublishedArtworks404,
  ListUserPublishedArtworksParams,
  PublishArtwork200,
  PublishArtwork401,
  PublishArtwork403,
  PublishArtwork404,
  ShowPublishedArtwork200,
  ShowPublishedArtwork404,
  UpdateArtworkDraft200,
  UpdateArtworkDraft401,
  UpdateArtworkDraft403,
  UpdateArtworkDraft404,
  UpdateArtworkDraftBody,
} from '.././model'

/**
 * Retrieve a list of all published artworks
 * @summary List Published Artworks
 */
export const listPublishedArtworks = (
  params?: ListPublishedArtworksParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListPublishedArtworks200>> => {
  return axios.get(`/api/v1/artworks`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListPublishedArtworksQueryKey = (
  params?: ListPublishedArtworksParams
) => {
  return [`/api/v1/artworks`, ...(params ? [params] : [])] as const
}

export const getListPublishedArtworksQueryOptions = <
  TData = Awaited<ReturnType<typeof listPublishedArtworks>>,
  TError = AxiosError<unknown>,
>(
  params?: ListPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListPublishedArtworksQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listPublishedArtworks>>
  > = ({ signal }) => listPublishedArtworks(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPublishedArtworks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPublishedArtworksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPublishedArtworks>>
>
export type ListPublishedArtworksQueryError = AxiosError<unknown>

export function useListPublishedArtworks<
  TData = Awaited<ReturnType<typeof listPublishedArtworks>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListPublishedArtworksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPublishedArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPublishedArtworks>>,
          TError,
          Awaited<ReturnType<typeof listPublishedArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPublishedArtworks<
  TData = Awaited<ReturnType<typeof listPublishedArtworks>>,
  TError = AxiosError<unknown>,
>(
  params?: ListPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPublishedArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPublishedArtworks>>,
          TError,
          Awaited<ReturnType<typeof listPublishedArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListPublishedArtworks<
  TData = Awaited<ReturnType<typeof listPublishedArtworks>>,
  TError = AxiosError<unknown>,
>(
  params?: ListPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Published Artworks
 */

export function useListPublishedArtworks<
  TData = Awaited<ReturnType<typeof listPublishedArtworks>>,
  TError = AxiosError<unknown>,
>(
  params?: ListPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListPublishedArtworksQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create a new artwork
 * @summary Create Artwork
 */
export const createArtwork = (
  createArtworkBody: CreateArtworkBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateArtwork200>> => {
  return axios.post(`/api/v1/artworks`, createArtworkBody, options)
}

export const getCreateArtworkMutationOptions = <
  TError = AxiosError<CreateArtwork401 | CreateArtwork403>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArtwork>>,
    TError,
    { data: CreateArtworkBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArtwork>>,
  TError,
  { data: CreateArtworkBody },
  TContext
> => {
  const mutationKey = ['createArtwork']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArtwork>>,
    { data: CreateArtworkBody }
  > = (props) => {
    const { data } = props ?? {}

    return createArtwork(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateArtworkMutationResult = NonNullable<
  Awaited<ReturnType<typeof createArtwork>>
>
export type CreateArtworkMutationBody = CreateArtworkBody
export type CreateArtworkMutationError = AxiosError<
  CreateArtwork401 | CreateArtwork403
>

/**
 * @summary Create Artwork
 */
export const useCreateArtwork = <
  TError = AxiosError<CreateArtwork401 | CreateArtwork403>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArtwork>>,
    TError,
    { data: CreateArtworkBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createArtwork>>,
  TError,
  { data: CreateArtworkBody },
  TContext
> => {
  const mutationOptions = getCreateArtworkMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Retrieve a single published artwork by id
 * @summary Show Published Artwork
 */
export const showPublishedArtwork = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShowPublishedArtwork200>> => {
  return axios.get(`/api/v1/artworks/${artworkId}`, options)
}

export const getShowPublishedArtworkQueryKey = (artworkId: number) => {
  return [`/api/v1/artworks/${artworkId}`] as const
}

export const getShowPublishedArtworkQueryOptions = <
  TData = Awaited<ReturnType<typeof showPublishedArtwork>>,
  TError = AxiosError<ShowPublishedArtwork404>,
>(
  artworkId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPublishedArtwork>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getShowPublishedArtworkQueryKey(artworkId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof showPublishedArtwork>>
  > = ({ signal }) =>
    showPublishedArtwork(artworkId, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!artworkId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof showPublishedArtwork>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ShowPublishedArtworkQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPublishedArtwork>>
>
export type ShowPublishedArtworkQueryError = AxiosError<ShowPublishedArtwork404>

export function useShowPublishedArtwork<
  TData = Awaited<ReturnType<typeof showPublishedArtwork>>,
  TError = AxiosError<ShowPublishedArtwork404>,
>(
  artworkId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPublishedArtwork>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showPublishedArtwork>>,
          TError,
          Awaited<ReturnType<typeof showPublishedArtwork>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowPublishedArtwork<
  TData = Awaited<ReturnType<typeof showPublishedArtwork>>,
  TError = AxiosError<ShowPublishedArtwork404>,
>(
  artworkId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPublishedArtwork>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showPublishedArtwork>>,
          TError,
          Awaited<ReturnType<typeof showPublishedArtwork>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShowPublishedArtwork<
  TData = Awaited<ReturnType<typeof showPublishedArtwork>>,
  TError = AxiosError<ShowPublishedArtwork404>,
>(
  artworkId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPublishedArtwork>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Show Published Artwork
 */

export function useShowPublishedArtwork<
  TData = Awaited<ReturnType<typeof showPublishedArtwork>>,
  TError = AxiosError<ShowPublishedArtwork404>,
>(
  artworkId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showPublishedArtwork>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShowPublishedArtworkQueryOptions(artworkId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an artwork draft
 * @summary Update Artwork Draft
 */
export const updateArtworkDraft = (
  artworkId: number,
  updateArtworkDraftBody?: UpdateArtworkDraftBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UpdateArtworkDraft200>> => {
  return axios.put(
    `/api/v1/artworks/${artworkId}`,
    updateArtworkDraftBody,
    options
  )
}

export const getUpdateArtworkDraftMutationOptions = <
  TError = AxiosError<
    UpdateArtworkDraft401 | UpdateArtworkDraft403 | UpdateArtworkDraft404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtworkDraft>>,
    TError,
    { artworkId: number; data: UpdateArtworkDraftBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArtworkDraft>>,
  TError,
  { artworkId: number; data: UpdateArtworkDraftBody },
  TContext
> => {
  const mutationKey = ['updateArtworkDraft']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArtworkDraft>>,
    { artworkId: number; data: UpdateArtworkDraftBody }
  > = (props) => {
    const { artworkId, data } = props ?? {}

    return updateArtworkDraft(artworkId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateArtworkDraftMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateArtworkDraft>>
>
export type UpdateArtworkDraftMutationBody = UpdateArtworkDraftBody
export type UpdateArtworkDraftMutationError = AxiosError<
  UpdateArtworkDraft401 | UpdateArtworkDraft403 | UpdateArtworkDraft404
>

/**
 * @summary Update Artwork Draft
 */
export const useUpdateArtworkDraft = <
  TError = AxiosError<
    UpdateArtworkDraft401 | UpdateArtworkDraft403 | UpdateArtworkDraft404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtworkDraft>>,
    TError,
    { artworkId: number; data: UpdateArtworkDraftBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateArtworkDraft>>,
  TError,
  { artworkId: number; data: UpdateArtworkDraftBody },
  TContext
> => {
  const mutationOptions = getUpdateArtworkDraftMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Delete an artwork
 * @summary Delete Artwork
 */
export const deleteArtwork = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`/api/v1/artworks/${artworkId}`, options)
}

export const getDeleteArtworkMutationOptions = <
  TError = AxiosError<DeleteArtwork401 | DeleteArtwork403 | DeleteArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationKey = ['deleteArtwork']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArtwork>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return deleteArtwork(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArtworkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArtwork>>
>

export type DeleteArtworkMutationError = AxiosError<
  DeleteArtwork401 | DeleteArtwork403 | DeleteArtwork404
>

/**
 * @summary Delete Artwork
 */
export const useDeleteArtwork = <
  TError = AxiosError<DeleteArtwork401 | DeleteArtwork403 | DeleteArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getDeleteArtworkMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Retrieve a list of artworks published or drafts by the currently authenticated user
 * @summary List Authenticated User Artworks
 */
export const listAuthenticatedUserArtworks = (
  params?: ListAuthenticatedUserArtworksParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAuthenticatedUserArtworks200>> => {
  return axios.get(`/api/v1/users/me/artworks`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAuthenticatedUserArtworksQueryKey = (
  params?: ListAuthenticatedUserArtworksParams
) => {
  return [`/api/v1/users/me/artworks`, ...(params ? [params] : [])] as const
}

export const getListAuthenticatedUserArtworksQueryOptions = <
  TData = Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
  TError = AxiosError<ListAuthenticatedUserArtworks401>,
>(
  params?: ListAuthenticatedUserArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAuthenticatedUserArtworksQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>
  > = ({ signal }) =>
    listAuthenticatedUserArtworks(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAuthenticatedUserArtworksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>
>
export type ListAuthenticatedUserArtworksQueryError =
  AxiosError<ListAuthenticatedUserArtworks401>

export function useListAuthenticatedUserArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
  TError = AxiosError<ListAuthenticatedUserArtworks401>,
>(
  params: undefined | ListAuthenticatedUserArtworksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
          TError,
          Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAuthenticatedUserArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
  TError = AxiosError<ListAuthenticatedUserArtworks401>,
>(
  params?: ListAuthenticatedUserArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
          TError,
          Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAuthenticatedUserArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
  TError = AxiosError<ListAuthenticatedUserArtworks401>,
>(
  params?: ListAuthenticatedUserArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Authenticated User Artworks
 */

export function useListAuthenticatedUserArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
  TError = AxiosError<ListAuthenticatedUserArtworks401>,
>(
  params?: ListAuthenticatedUserArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListAuthenticatedUserArtworksQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve a list of artworks published by a user
 * @summary List User Published Artworks
 */
export const listUserPublishedArtworks = (
  username: string,
  params?: ListUserPublishedArtworksParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListUserPublishedArtworks200>> => {
  return axios.get(`/api/v1/users/${username}/artworks`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListUserPublishedArtworksQueryKey = (
  username: string,
  params?: ListUserPublishedArtworksParams
) => {
  return [
    `/api/v1/users/${username}/artworks`,
    ...(params ? [params] : []),
  ] as const
}

export const getListUserPublishedArtworksQueryOptions = <
  TData = Awaited<ReturnType<typeof listUserPublishedArtworks>>,
  TError = AxiosError<ListUserPublishedArtworks404>,
>(
  username: string,
  params?: ListUserPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getListUserPublishedArtworksQueryKey(username, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listUserPublishedArtworks>>
  > = ({ signal }) =>
    listUserPublishedArtworks(username, params, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listUserPublishedArtworks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUserPublishedArtworksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUserPublishedArtworks>>
>
export type ListUserPublishedArtworksQueryError =
  AxiosError<ListUserPublishedArtworks404>

export function useListUserPublishedArtworks<
  TData = Awaited<ReturnType<typeof listUserPublishedArtworks>>,
  TError = AxiosError<ListUserPublishedArtworks404>,
>(
  username: string,
  params: undefined | ListUserPublishedArtworksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserPublishedArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserPublishedArtworks>>,
          TError,
          Awaited<ReturnType<typeof listUserPublishedArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUserPublishedArtworks<
  TData = Awaited<ReturnType<typeof listUserPublishedArtworks>>,
  TError = AxiosError<ListUserPublishedArtworks404>,
>(
  username: string,
  params?: ListUserPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserPublishedArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserPublishedArtworks>>,
          TError,
          Awaited<ReturnType<typeof listUserPublishedArtworks>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUserPublishedArtworks<
  TData = Awaited<ReturnType<typeof listUserPublishedArtworks>>,
  TError = AxiosError<ListUserPublishedArtworks404>,
>(
  username: string,
  params?: ListUserPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List User Published Artworks
 */

export function useListUserPublishedArtworks<
  TData = Awaited<ReturnType<typeof listUserPublishedArtworks>>,
  TError = AxiosError<ListUserPublishedArtworks404>,
>(
  username: string,
  params?: ListUserPublishedArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserPublishedArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListUserPublishedArtworksQueryOptions(
    username,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Publish an artwork draft
 * @summary Publish Artwork
 */
export const publishArtwork = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PublishArtwork200>> => {
  return axios.put(`/api/v1/artworks/${artworkId}/publish`, undefined, options)
}

export const getPublishArtworkMutationOptions = <
  TError = AxiosError<
    PublishArtwork401 | PublishArtwork403 | PublishArtwork404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof publishArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationKey = ['publishArtwork']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof publishArtwork>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return publishArtwork(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PublishArtworkMutationResult = NonNullable<
  Awaited<ReturnType<typeof publishArtwork>>
>

export type PublishArtworkMutationError = AxiosError<
  PublishArtwork401 | PublishArtwork403 | PublishArtwork404
>

/**
 * @summary Publish Artwork
 */
export const usePublishArtwork = <
  TError = AxiosError<
    PublishArtwork401 | PublishArtwork403 | PublishArtwork404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof publishArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getPublishArtworkMutationOptions(options)

  return useMutation(mutationOptions)
}
