/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ListAuthenticatedUserFavoriteArtworks200,
  ListAuthenticatedUserFavoriteArtworks401,
  ListAuthenticatedUserFavoriteArtworksParams,
  MarkArtworkAsFavorite200,
  MarkArtworkAsFavorite401,
  MarkArtworkAsFavorite403,
  MarkArtworkAsFavorite404,
  RemoveArtworkFromFavorites401,
  RemoveArtworkFromFavorites403,
  RemoveArtworkFromFavorites404,
} from '.././model'

/**
 * Retrieve a list of artworks favorites by the currently authenticated user
 * @summary List Authenticated User Favorite Artworks
 */
export const listAuthenticatedUserFavoriteArtworks = (
  params?: ListAuthenticatedUserFavoriteArtworksParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAuthenticatedUserFavoriteArtworks200>> => {
  return axios.get(`/api/v1/users/me/favorites/artworks`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAuthenticatedUserFavoriteArtworksQueryKey = (
  params?: ListAuthenticatedUserFavoriteArtworksParams
) => {
  return [
    `/api/v1/users/me/favorites/artworks`,
    ...(params ? [params] : []),
  ] as const
}

export const getListAuthenticatedUserFavoriteArtworksQueryOptions = <
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
  TError = AxiosError<ListAuthenticatedUserFavoriteArtworks401>,
>(
  params?: ListAuthenticatedUserFavoriteArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getListAuthenticatedUserFavoriteArtworksQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>
  > = ({ signal }) =>
    listAuthenticatedUserFavoriteArtworks(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListAuthenticatedUserFavoriteArtworksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>
>
export type ListAuthenticatedUserFavoriteArtworksQueryError =
  AxiosError<ListAuthenticatedUserFavoriteArtworks401>

export function useListAuthenticatedUserFavoriteArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
  TError = AxiosError<ListAuthenticatedUserFavoriteArtworks401>,
>(
  params: undefined | ListAuthenticatedUserFavoriteArtworksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFavoriteArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
  TError = AxiosError<ListAuthenticatedUserFavoriteArtworks401>,
>(
  params?: ListAuthenticatedUserFavoriteArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFavoriteArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
  TError = AxiosError<ListAuthenticatedUserFavoriteArtworks401>,
>(
  params?: ListAuthenticatedUserFavoriteArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Authenticated User Favorite Artworks
 */

export function useListAuthenticatedUserFavoriteArtworks<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
  TError = AxiosError<ListAuthenticatedUserFavoriteArtworks401>,
>(
  params?: ListAuthenticatedUserFavoriteArtworksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFavoriteArtworks>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListAuthenticatedUserFavoriteArtworksQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Mark an artwork as favorite
 * @summary Mark Artwork As Favorite
 */
export const markArtworkAsFavorite = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MarkArtworkAsFavorite200>> => {
  return axios.post(
    `/api/v1/artworks/${artworkId}/favorites`,
    undefined,
    options
  )
}

export const getMarkArtworkAsFavoriteMutationOptions = <
  TError = AxiosError<
    | MarkArtworkAsFavorite401
    | MarkArtworkAsFavorite403
    | MarkArtworkAsFavorite404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markArtworkAsFavorite>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof markArtworkAsFavorite>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof markArtworkAsFavorite>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return markArtworkAsFavorite(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type MarkArtworkAsFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof markArtworkAsFavorite>>
>

export type MarkArtworkAsFavoriteMutationError = AxiosError<
  MarkArtworkAsFavorite401 | MarkArtworkAsFavorite403 | MarkArtworkAsFavorite404
>

/**
 * @summary Mark Artwork As Favorite
 */
export const useMarkArtworkAsFavorite = <
  TError = AxiosError<
    | MarkArtworkAsFavorite401
    | MarkArtworkAsFavorite403
    | MarkArtworkAsFavorite404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markArtworkAsFavorite>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof markArtworkAsFavorite>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getMarkArtworkAsFavoriteMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Remove an artwork from favorites
 * @summary Remove Artwork From Favorites
 */
export const removeArtworkFromFavorites = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`/api/v1/artworks/${artworkId}/favorites`, options)
}

export const getRemoveArtworkFromFavoritesMutationOptions = <
  TError = AxiosError<
    | RemoveArtworkFromFavorites401
    | RemoveArtworkFromFavorites403
    | RemoveArtworkFromFavorites404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeArtworkFromFavorites>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeArtworkFromFavorites>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeArtworkFromFavorites>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return removeArtworkFromFavorites(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RemoveArtworkFromFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeArtworkFromFavorites>>
>

export type RemoveArtworkFromFavoritesMutationError = AxiosError<
  | RemoveArtworkFromFavorites401
  | RemoveArtworkFromFavorites403
  | RemoveArtworkFromFavorites404
>

/**
 * @summary Remove Artwork From Favorites
 */
export const useRemoveArtworkFromFavorites = <
  TError = AxiosError<
    | RemoveArtworkFromFavorites401
    | RemoveArtworkFromFavorites403
    | RemoveArtworkFromFavorites404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeArtworkFromFavorites>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof removeArtworkFromFavorites>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getRemoveArtworkFromFavoritesMutationOptions(options)

  return useMutation(mutationOptions)
}
