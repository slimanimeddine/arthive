/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  FollowUser200,
  FollowUser401,
  FollowUser403,
  FollowUser404,
  ListAuthenticatedUserFollowers200,
  ListAuthenticatedUserFollowers401,
  ListAuthenticatedUserFollowersParams,
  ListAuthenticatedUserFollowing200,
  ListAuthenticatedUserFollowing401,
  ListAuthenticatedUserFollowingParams,
  UnfollowUser401,
  UnfollowUser403,
  UnfollowUser404,
} from '.././model'

/**
 * Retrieve a list of users following the currently authenticated user
 * @summary List Authenticated User Followers
 */
export const listAuthenticatedUserFollowers = (
  params?: ListAuthenticatedUserFollowersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAuthenticatedUserFollowers200>> => {
  return axios.get(`/api/v1/users/me/follows/followers`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAuthenticatedUserFollowersQueryKey = (
  params?: ListAuthenticatedUserFollowersParams
) => {
  return [
    `/api/v1/users/me/follows/followers`,
    ...(params ? [params] : []),
  ] as const
}

export const getListAuthenticatedUserFollowersQueryOptions = <
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
  TError = AxiosError<ListAuthenticatedUserFollowers401>,
>(
  params?: ListAuthenticatedUserFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAuthenticatedUserFollowersQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>
  > = ({ signal }) =>
    listAuthenticatedUserFollowers(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListAuthenticatedUserFollowersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>
>
export type ListAuthenticatedUserFollowersQueryError =
  AxiosError<ListAuthenticatedUserFollowers401>

export function useListAuthenticatedUserFollowers<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
  TError = AxiosError<ListAuthenticatedUserFollowers401>,
>(
  params: undefined | ListAuthenticatedUserFollowersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFollowers<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
  TError = AxiosError<ListAuthenticatedUserFollowers401>,
>(
  params?: ListAuthenticatedUserFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFollowers<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
  TError = AxiosError<ListAuthenticatedUserFollowers401>,
>(
  params?: ListAuthenticatedUserFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Authenticated User Followers
 */

export function useListAuthenticatedUserFollowers<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
  TError = AxiosError<ListAuthenticatedUserFollowers401>,
>(
  params?: ListAuthenticatedUserFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowers>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListAuthenticatedUserFollowersQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve a list of users followed by the currently authenticated user
 * @summary List Authenticated User Following
 */
export const listAuthenticatedUserFollowing = (
  params?: ListAuthenticatedUserFollowingParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListAuthenticatedUserFollowing200>> => {
  return axios.get(`/api/v1/users/me/follows/following`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListAuthenticatedUserFollowingQueryKey = (
  params?: ListAuthenticatedUserFollowingParams
) => {
  return [
    `/api/v1/users/me/follows/following`,
    ...(params ? [params] : []),
  ] as const
}

export const getListAuthenticatedUserFollowingQueryOptions = <
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
  TError = AxiosError<ListAuthenticatedUserFollowing401>,
>(
  params?: ListAuthenticatedUserFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListAuthenticatedUserFollowingQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>
  > = ({ signal }) =>
    listAuthenticatedUserFollowing(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListAuthenticatedUserFollowingQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>
>
export type ListAuthenticatedUserFollowingQueryError =
  AxiosError<ListAuthenticatedUserFollowing401>

export function useListAuthenticatedUserFollowing<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
  TError = AxiosError<ListAuthenticatedUserFollowing401>,
>(
  params: undefined | ListAuthenticatedUserFollowingParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFollowing<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
  TError = AxiosError<ListAuthenticatedUserFollowing401>,
>(
  params?: ListAuthenticatedUserFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListAuthenticatedUserFollowing<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
  TError = AxiosError<ListAuthenticatedUserFollowing401>,
>(
  params?: ListAuthenticatedUserFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Authenticated User Following
 */

export function useListAuthenticatedUserFollowing<
  TData = Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
  TError = AxiosError<ListAuthenticatedUserFollowing401>,
>(
  params?: ListAuthenticatedUserFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAuthenticatedUserFollowing>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListAuthenticatedUserFollowingQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Follow a user
 * @summary Follow User
 */
export const followUser = (
  userId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<FollowUser200>> => {
  return axios.post(`/api/v1/follows/users/${userId}`, undefined, options)
}

export const getFollowUserMutationOptions = <
  TError = AxiosError<FollowUser401 | FollowUser403 | FollowUser404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof followUser>>,
    TError,
    { userId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof followUser>>,
  TError,
  { userId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof followUser>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {}

    return followUser(userId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type FollowUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof followUser>>
>

export type FollowUserMutationError = AxiosError<
  FollowUser401 | FollowUser403 | FollowUser404
>

/**
 * @summary Follow User
 */
export const useFollowUser = <
  TError = AxiosError<FollowUser401 | FollowUser403 | FollowUser404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof followUser>>,
    TError,
    { userId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof followUser>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getFollowUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Unfollow a user
 * @summary Unfollow User
 */
export const unfollowUser = (
  userId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`/api/v1/follows/users/${userId}`, options)
}

export const getUnfollowUserMutationOptions = <
  TError = AxiosError<UnfollowUser401 | UnfollowUser403 | UnfollowUser404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unfollowUser>>,
    TError,
    { userId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof unfollowUser>>,
  TError,
  { userId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unfollowUser>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {}

    return unfollowUser(userId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UnfollowUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof unfollowUser>>
>

export type UnfollowUserMutationError = AxiosError<
  UnfollowUser401 | UnfollowUser403 | UnfollowUser404
>

/**
 * @summary Unfollow User
 */
export const useUnfollowUser = <
  TError = AxiosError<UnfollowUser401 | UnfollowUser403 | UnfollowUser404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unfollowUser>>,
    TError,
    { userId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof unfollowUser>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getUnfollowUserMutationOptions(options)

  return useMutation(mutationOptions)
}
