/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  DeleteArtworkPhoto200,
  DeleteArtworkPhoto401,
  DeleteArtworkPhoto403,
  DeleteArtworkPhoto404,
  ReplaceArtworkPhotoPath200,
  ReplaceArtworkPhotoPath401,
  ReplaceArtworkPhotoPath403,
  ReplaceArtworkPhotoPath404,
  ReplaceArtworkPhotoPathBody,
  SetArtworkPhotoAsMain200,
  SetArtworkPhotoAsMain401,
  SetArtworkPhotoAsMain404,
  UploadArtworkPhotos200,
  UploadArtworkPhotos401,
  UploadArtworkPhotos404,
  UploadArtworkPhotosBody,
} from '.././model'

/**
 * Upload photos to an artwork draft
 * @summary Upload Artwork Photos
 */
export const uploadArtworkPhotos = (
  artworkId: number,
  uploadArtworkPhotosBody: UploadArtworkPhotosBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UploadArtworkPhotos200>> => {
  const formData = new FormData()
  uploadArtworkPhotosBody.photos.forEach((value) =>
    formData.append('photos', value)
  )

  return axios.post(
    `/api/v1/artworks/${artworkId}/artwork-photos`,
    formData,
    options
  )
}

export const getUploadArtworkPhotosMutationOptions = <
  TError = AxiosError<UploadArtworkPhotos401 | string | UploadArtworkPhotos404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadArtworkPhotos>>,
    TError,
    { artworkId: number; data: UploadArtworkPhotosBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadArtworkPhotos>>,
  TError,
  { artworkId: number; data: UploadArtworkPhotosBody },
  TContext
> => {
  const mutationKey = ['uploadArtworkPhotos']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadArtworkPhotos>>,
    { artworkId: number; data: UploadArtworkPhotosBody }
  > = (props) => {
    const { artworkId, data } = props ?? {}

    return uploadArtworkPhotos(artworkId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UploadArtworkPhotosMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadArtworkPhotos>>
>
export type UploadArtworkPhotosMutationBody = UploadArtworkPhotosBody
export type UploadArtworkPhotosMutationError = AxiosError<
  UploadArtworkPhotos401 | string | UploadArtworkPhotos404
>

/**
 * @summary Upload Artwork Photos
 */
export const useUploadArtworkPhotos = <
  TError = AxiosError<UploadArtworkPhotos401 | string | UploadArtworkPhotos404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadArtworkPhotos>>,
    TError,
    { artworkId: number; data: UploadArtworkPhotosBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof uploadArtworkPhotos>>,
  TError,
  { artworkId: number; data: UploadArtworkPhotosBody },
  TContext
> => {
  const mutationOptions = getUploadArtworkPhotosMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Set an artwork photo as the main photo of the artwork
 * @summary Set Artwork Photo As Main
 */
export const setArtworkPhotoAsMain = (
  artworkPhotoId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SetArtworkPhotoAsMain200>> => {
  return axios.put(
    `/api/v1/artwork-photos/${artworkPhotoId}`,
    undefined,
    options
  )
}

export const getSetArtworkPhotoAsMainMutationOptions = <
  TError = AxiosError<
    SetArtworkPhotoAsMain401 | string | SetArtworkPhotoAsMain404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setArtworkPhotoAsMain>>,
    TError,
    { artworkPhotoId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof setArtworkPhotoAsMain>>,
  TError,
  { artworkPhotoId: number },
  TContext
> => {
  const mutationKey = ['setArtworkPhotoAsMain']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setArtworkPhotoAsMain>>,
    { artworkPhotoId: number }
  > = (props) => {
    const { artworkPhotoId } = props ?? {}

    return setArtworkPhotoAsMain(artworkPhotoId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetArtworkPhotoAsMainMutationResult = NonNullable<
  Awaited<ReturnType<typeof setArtworkPhotoAsMain>>
>

export type SetArtworkPhotoAsMainMutationError = AxiosError<
  SetArtworkPhotoAsMain401 | string | SetArtworkPhotoAsMain404
>

/**
 * @summary Set Artwork Photo As Main
 */
export const useSetArtworkPhotoAsMain = <
  TError = AxiosError<
    SetArtworkPhotoAsMain401 | string | SetArtworkPhotoAsMain404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setArtworkPhotoAsMain>>,
    TError,
    { artworkPhotoId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof setArtworkPhotoAsMain>>,
  TError,
  { artworkPhotoId: number },
  TContext
> => {
  const mutationOptions = getSetArtworkPhotoAsMainMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Delete an artwork photo
 * @summary Delete Artwork Photo
 */
export const deleteArtworkPhoto = (
  artworkPhotoId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DeleteArtworkPhoto200>> => {
  return axios.delete(`/api/v1/artwork-photos/${artworkPhotoId}`, options)
}

export const getDeleteArtworkPhotoMutationOptions = <
  TError = AxiosError<
    DeleteArtworkPhoto401 | DeleteArtworkPhoto403 | DeleteArtworkPhoto404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtworkPhoto>>,
    TError,
    { artworkPhotoId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArtworkPhoto>>,
  TError,
  { artworkPhotoId: number },
  TContext
> => {
  const mutationKey = ['deleteArtworkPhoto']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArtworkPhoto>>,
    { artworkPhotoId: number }
  > = (props) => {
    const { artworkPhotoId } = props ?? {}

    return deleteArtworkPhoto(artworkPhotoId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArtworkPhotoMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArtworkPhoto>>
>

export type DeleteArtworkPhotoMutationError = AxiosError<
  DeleteArtworkPhoto401 | DeleteArtworkPhoto403 | DeleteArtworkPhoto404
>

/**
 * @summary Delete Artwork Photo
 */
export const useDeleteArtworkPhoto = <
  TError = AxiosError<
    DeleteArtworkPhoto401 | DeleteArtworkPhoto403 | DeleteArtworkPhoto404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtworkPhoto>>,
    TError,
    { artworkPhotoId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteArtworkPhoto>>,
  TError,
  { artworkPhotoId: number },
  TContext
> => {
  const mutationOptions = getDeleteArtworkPhotoMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Replace the path of an artwork photo
 * @summary Replace Artwork Photo Path
 */
export const replaceArtworkPhotoPath = (
  artworkPhotoId: number,
  replaceArtworkPhotoPathBody: ReplaceArtworkPhotoPathBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReplaceArtworkPhotoPath200>> => {
  const formData = new FormData()
  formData.append('photo', replaceArtworkPhotoPathBody.photo)

  return axios.put(
    `/api/v1/artwork-photos/${artworkPhotoId}/path`,
    formData,
    options
  )
}

export const getReplaceArtworkPhotoPathMutationOptions = <
  TError = AxiosError<
    | ReplaceArtworkPhotoPath401
    | ReplaceArtworkPhotoPath403
    | ReplaceArtworkPhotoPath404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof replaceArtworkPhotoPath>>,
    TError,
    { artworkPhotoId: number; data: ReplaceArtworkPhotoPathBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof replaceArtworkPhotoPath>>,
  TError,
  { artworkPhotoId: number; data: ReplaceArtworkPhotoPathBody },
  TContext
> => {
  const mutationKey = ['replaceArtworkPhotoPath']
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof replaceArtworkPhotoPath>>,
    { artworkPhotoId: number; data: ReplaceArtworkPhotoPathBody }
  > = (props) => {
    const { artworkPhotoId, data } = props ?? {}

    return replaceArtworkPhotoPath(artworkPhotoId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReplaceArtworkPhotoPathMutationResult = NonNullable<
  Awaited<ReturnType<typeof replaceArtworkPhotoPath>>
>
export type ReplaceArtworkPhotoPathMutationBody = ReplaceArtworkPhotoPathBody
export type ReplaceArtworkPhotoPathMutationError = AxiosError<
  | ReplaceArtworkPhotoPath401
  | ReplaceArtworkPhotoPath403
  | ReplaceArtworkPhotoPath404
>

/**
 * @summary Replace Artwork Photo Path
 */
export const useReplaceArtworkPhotoPath = <
  TError = AxiosError<
    | ReplaceArtworkPhotoPath401
    | ReplaceArtworkPhotoPath403
    | ReplaceArtworkPhotoPath404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof replaceArtworkPhotoPath>>,
    TError,
    { artworkPhotoId: number; data: ReplaceArtworkPhotoPathBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof replaceArtworkPhotoPath>>,
  TError,
  { artworkPhotoId: number; data: ReplaceArtworkPhotoPathBody },
  TContext
> => {
  const mutationOptions = getReplaceArtworkPhotoPathMutationOptions(options)

  return useMutation(mutationOptions)
}
