/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod'

/**
 * Retrieve a list of authenticated user notifications
 * @summary List authenticated user notifications
 */
export const listAuthenticatedUserNotificationsQueryParams = zod.object({
  'filter[notificationType]': zod
    .enum([
      'artist-verification-request',
      'artist-verification-response',
      'artwork-comment',
      'artwork-like',
      'follow',
    ])
    .optional(),
  'filter[readStatus]': zod.enum(['read', 'unread']).optional(),
  page: zod.number().optional(),
  perPage: zod.number().optional(),
})

export const listAuthenticatedUserNotificationsResponse = zod
  .object({
    data: zod
      .object({
        current_page: zod.number().optional(),
        data: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              type: zod.string().optional(),
              notifiable_type: zod.string().optional(),
              notifiable_id: zod.number().optional(),
              data: zod
                .object({
                  user: zod
                    .object({
                      id: zod.number().optional(),
                      username: zod.string().optional(),
                    })
                    .optional(),
                })
                .optional(),
              read_at: zod.string().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
            })
          )
          .optional(),
        first_page_url: zod.string().optional(),
        from: zod.number().optional(),
        last_page: zod.number().optional(),
        last_page_url: zod.string().optional(),
        links: zod
          .array(
            zod.object({
              url: zod.string().optional(),
              label: zod.string().optional(),
              active: zod.boolean().optional(),
            })
          )
          .optional(),
        next_page_url: zod.string().optional(),
        path: zod.string().optional(),
        per_page: zod.number().optional(),
        prev_page_url: zod.string().optional(),
        to: zod.number().optional(),
        total: zod.number().optional(),
      })
      .optional(),
    message: zod.string().optional(),
    status: zod.number().optional(),
  })
  .or(
    zod.object({
      data: zod
        .object({
          current_page: zod.number().optional(),
          data: zod
            .array(
              zod.object({
                id: zod.string().optional(),
                type: zod.string().optional(),
                notifiable_type: zod.string().optional(),
                notifiable_id: zod.number().optional(),
                data: zod
                  .object({
                    follower: zod
                      .object({
                        id: zod.number().optional(),
                        username: zod.string().optional(),
                      })
                      .optional(),
                  })
                  .optional(),
                read_at: zod.string().optional(),
                created_at: zod.string().optional(),
                updated_at: zod.string().optional(),
              })
            )
            .optional(),
          first_page_url: zod.string().optional(),
          from: zod.number().optional(),
          last_page: zod.number().optional(),
          last_page_url: zod.string().optional(),
          links: zod
            .array(
              zod.object({
                url: zod.string().optional(),
                label: zod.string().optional(),
                active: zod.boolean().optional(),
              })
            )
            .optional(),
          next_page_url: zod.string().optional(),
          path: zod.string().optional(),
          per_page: zod.number().optional(),
          prev_page_url: zod.string().optional(),
          to: zod.number().optional(),
          total: zod.number().optional(),
        })
        .optional(),
      message: zod.string().optional(),
      status: zod.number().optional(),
    })
  )

/**
 * Mark a specific notification as read
 * @summary Mark notification as read
 */
export const markNotificationAsReadResponse = zod.object({
  message: zod.string().optional(),
  data: zod.string().optional(),
  status: zod.number().optional(),
})

/**
 * Mark all authenticated user notifications as read
 * @summary Mark all notifications as read
 */
export const markAllNotificationsAsReadResponse = zod.object({
  message: zod.string().optional(),
  data: zod.string().optional(),
  status: zod.number().optional(),
})

/**
 * Check if the authenticated user has any unread notifications
 * @summary Check if unread notifications exist
 */
export const checkIfUnreadNotificationsExistResponse = zod.object({
  message: zod.string().optional(),
  data: zod
    .object({
      exists: zod.boolean().optional(),
    })
    .optional(),
  status: zod.number().optional(),
})
