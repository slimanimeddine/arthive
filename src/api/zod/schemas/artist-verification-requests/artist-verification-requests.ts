/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod'

/**
 * Retrieve a list of artist verification requests submitted by artists.
 * @summary List Artist Verification Requests
 */
export const listArtistVerificationRequestsQueryParams = zod.object({
  perPage: zod.number().optional(),
})

export const listArtistVerificationRequestsResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        user_id: zod.number().optional(),
        status: zod.string().optional(),
        reason: zod.string().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        user: zod
          .object({
            id: zod.number().optional(),
            username: zod.string().optional(),
            first_name: zod.string().optional(),
            last_name: zod.string().optional(),
            email: zod.string().optional(),
            country: zod.string().optional(),
            bio: zod.string().optional(),
            photo: zod.string().optional(),
            artist_verified_at: zod.string().optional(),
            email_verified_at: zod.string().optional(),
            role: zod.string().optional(),
            created_at: zod.string().optional(),
            updated_at: zod.string().optional(),
          })
          .optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Submits an artist verification request
 * @summary Submit Artist Verification Request
 */
export const submitArtistVerificationRequestResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      user_id: zod.number().optional(),
      status: zod.string().optional(),
      reason: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})

/**
 * Reviews an artist verification request
 * @summary Review Artist Verification Request
 */
export const reviewArtistVerificationRequestBody = zod.object({
  status: zod.string().optional(),
  reason: zod.string().optional(),
})

export const reviewArtistVerificationRequestResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      user_id: zod.number().optional(),
      status: zod.string().optional(),
      reason: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})
