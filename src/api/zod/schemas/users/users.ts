/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod'

/**
 * Retrieve a list of all users
 * @summary List Users
 */
export const listUsersQueryParams = zod.object({
  'filter[country]': zod.string().optional(),
  'filter[tag]': zod
    .enum([
      'painting',
      'graphic',
      'sculpture',
      'folk art',
      'textile',
      'ceramics',
      'stained glass windows',
      'beads',
      'paper',
      'glass',
      'dolls',
      'jewellery',
      'fresco',
      'metal',
      'mosaic',
    ])
    .optional(),
  'filter[verified]': zod.boolean().optional(),
  searchQuery: zod.string().optional(),
  sort: zod.string().optional(),
  page: zod.string().optional(),
  perPage: zod.string().optional(),
})

export const listUsersResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        username: zod.string().optional(),
        first_name: zod.string().optional(),
        last_name: zod.string().optional(),
        email: zod.string().optional(),
        country: zod.string().optional(),
        bio: zod.string().optional(),
        photo: zod.string().optional(),
        artist_verified_at: zod.string().optional(),
        email_verified_at: zod.string().optional(),
        role: zod.string().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artworks: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              title: zod.string().optional(),
              description: zod.string().optional(),
              status: zod.string().optional(),
              user_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              artwork_likes_count: zod.number().optional(),
              artwork_comments_count: zod.number().optional(),
              artwork_main_photo_path: zod.string().optional(),
            })
          )
          .optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Retrieve a single user by id
 * @summary Show User By Id
 */
export const showUserByIdResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      username: zod.string().optional(),
      first_name: zod.string().optional(),
      last_name: zod.string().optional(),
      email: zod.string().optional(),
      country: zod.string().optional(),
      bio: zod.string().optional(),
      photo: zod.string().optional(),
      artist_verified_at: zod.string().optional(),
      email_verified_at: zod.string().optional(),
      role: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})

/**
 * Retrieve the currently authenticated user
 * @summary Show Authenticated User
 */
export const showAuthenticatedUserResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      username: zod.string().optional(),
      first_name: zod.string().optional(),
      last_name: zod.string().optional(),
      email: zod.string().optional(),
      country: zod.string().optional(),
      bio: zod.string().optional(),
      photo: zod.string().optional(),
      artist_verified_at: zod.string().optional(),
      email_verified_at: zod.string().optional(),
      role: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})

/**
 * Update the currently authenticated user
 * @summary Update Authenticated User
 */
export const updateAuthenticatedUserResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      username: zod.string().optional(),
      first_name: zod.string().optional(),
      last_name: zod.string().optional(),
      email: zod.string().optional(),
      country: zod.string().optional(),
      bio: zod.string().optional(),
      photo: zod.string().optional(),
      artist_verified_at: zod.string().optional(),
      email_verified_at: zod.string().optional(),
      role: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})

/**
 * Retrieve a single user by username
 * @summary Show User
 */
export const showUserResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      username: zod.string().optional(),
      first_name: zod.string().optional(),
      last_name: zod.string().optional(),
      email: zod.string().optional(),
      country: zod.string().optional(),
      bio: zod.string().optional(),
      photo: zod.string().optional(),
      artist_verified_at: zod.string().optional(),
      email_verified_at: zod.string().optional(),
      role: zod.string().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})
