/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod'

/**
 * Retrieve a list of all published artworks
 * @summary List Published Artworks
 */
export const listPublishedArtworksQueryParams = zod.object({
  'filter[tag]': zod
    .enum([
      'painting',
      'graphic',
      'sculpture',
      'folk art',
      'textile',
      'ceramics',
      'stained glass windows',
      'beads',
      'paper',
      'glass',
      'dolls',
      'jewellery',
      'fresco',
      'metal',
      'mosaic',
    ])
    .optional(),
  searchQuery: zod.string().optional(),
  sort: zod.enum(['rising', 'new', 'popular', 'trending']).optional(),
  page: zod.number().optional(),
  perPage: zod.number().optional(),
})

export const listPublishedArtworksResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        title: zod.string().optional(),
        description: zod.string().optional(),
        status: zod.string().optional(),
        user_id: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artwork_likes_count: zod.number().optional(),
        artwork_comments_count: zod.number().optional(),
        artwork_main_photo_path: zod.string().optional(),
        user: zod
          .object({
            id: zod.number().optional(),
            username: zod.string().optional(),
            first_name: zod.string().optional(),
            last_name: zod.string().optional(),
            email: zod.string().optional(),
            country: zod.string().optional(),
            bio: zod.string().optional(),
            photo: zod.string().optional(),
            artist_verified_at: zod.string().optional(),
            email_verified_at: zod.string().optional(),
            role: zod.string().optional(),
            created_at: zod.string().optional(),
            updated_at: zod.string().optional(),
          })
          .optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Create a new artwork
 * @summary Create Artwork
 */
export const createArtworkBody = zod.object({
  title: zod.string(),
  description: zod.string(),
  tags: zod.array(zod.string()),
  photos: zod.string().optional(),
})

export const createArtworkResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      title: zod.string().optional(),
      description: zod.string().optional(),
      status: zod.string().optional(),
      user_id: zod.number().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
      artwork_likes_count: zod.number().optional(),
      artwork_comments_count: zod.number().optional(),
      artwork_main_photo_path: zod.string().optional(),
    })
    .optional(),
})

/**
 * Retrieve a single published artwork by id
 * @summary Show Published Artwork
 */
export const showPublishedArtworkResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        title: zod.string().optional(),
        description: zod.string().optional(),
        status: zod.string().optional(),
        user_id: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artwork_likes_count: zod.number().optional(),
        artwork_comments_count: zod.number().optional(),
        artwork_main_photo_path: zod.string().optional(),
        user: zod
          .object({
            id: zod.number().optional(),
            username: zod.string().optional(),
            first_name: zod.string().optional(),
            last_name: zod.string().optional(),
            email: zod.string().optional(),
            country: zod.string().optional(),
            bio: zod.string().optional(),
            photo: zod.string().optional(),
            artist_verified_at: zod.string().optional(),
            email_verified_at: zod.string().optional(),
            role: zod.string().optional(),
            created_at: zod.string().optional(),
            updated_at: zod.string().optional(),
          })
          .optional(),
        artwork_photos: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              path: zod.string().optional(),
              is_main: zod.number().optional(),
              artwork_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
            })
          )
          .optional(),
        artwork_comments: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              comment_text: zod.string().optional(),
              artwork_id: zod.number().optional(),
              user_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              user: zod
                .object({
                  id: zod.number().optional(),
                  username: zod.string().optional(),
                  first_name: zod.string().optional(),
                  last_name: zod.string().optional(),
                  email: zod.string().optional(),
                  country: zod.string().optional(),
                  bio: zod.string().optional(),
                  photo: zod.string().optional(),
                  artist_verified_at: zod.string().optional(),
                  email_verified_at: zod.string().optional(),
                  role: zod.string().optional(),
                  created_at: zod.string().optional(),
                  updated_at: zod.string().optional(),
                })
                .optional(),
            })
          )
          .optional(),
        artwork_likes: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              artwork_id: zod.number().optional(),
              user_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              user: zod
                .object({
                  id: zod.number().optional(),
                  username: zod.string().optional(),
                  first_name: zod.string().optional(),
                  last_name: zod.string().optional(),
                  email: zod.string().optional(),
                  country: zod.string().optional(),
                  bio: zod.string().optional(),
                  photo: zod.string().optional(),
                  artist_verified_at: zod.string().optional(),
                  email_verified_at: zod.string().optional(),
                  role: zod.string().optional(),
                  created_at: zod.string().optional(),
                  updated_at: zod.string().optional(),
                })
                .optional(),
            })
          )
          .optional(),
        tags: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              name: zod.string().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              pivot: zod
                .object({
                  artwork_id: zod.number().optional(),
                  tag_id: zod.number().optional(),
                })
                .optional(),
            })
          )
          .optional(),
      })
    )
    .optional(),
})

/**
 * Update an artwork draft
 * @summary Update Artwork Draft
 */
export const updateArtworkDraftBody = zod.object({
  title: zod.string().optional(),
  description: zod.string().optional(),
  tags: zod.array(zod.string()).optional(),
})

export const updateArtworkDraftResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      title: zod.string().optional(),
      description: zod.string().optional(),
      status: zod.string().optional(),
      user_id: zod.number().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
      artwork_likes_count: zod.number().optional(),
      artwork_comments_count: zod.number().optional(),
      artwork_main_photo_path: zod.string().optional(),
    })
    .optional(),
})

/**
 * Retrieve a list of artworks published or drafts by the currently authenticated user
 * @summary List Authenticated User Artworks
 */
export const listAuthenticatedUserArtworksQueryParams = zod.object({
  'filter[status]': zod.enum(['draft', 'published']).optional(),
  page: zod.number().optional(),
  perPage: zod.number().optional(),
})

export const listAuthenticatedUserArtworksResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        title: zod.string().optional(),
        description: zod.string().optional(),
        status: zod.string().optional(),
        user_id: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artwork_likes_count: zod.number().optional(),
        artwork_comments_count: zod.number().optional(),
        artwork_main_photo_path: zod.string().optional(),
        artwork_photos: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              path: zod.string().optional(),
              is_main: zod.number().optional(),
              artwork_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
            })
          )
          .optional(),
        tags: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              name: zod.string().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              pivot: zod
                .object({
                  artwork_id: zod.number().optional(),
                  tag_id: zod.number().optional(),
                })
                .optional(),
            })
          )
          .optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Retrieve a list of artworks published by a user
 * @summary List User Published Artworks
 */
export const listUserPublishedArtworksQueryParams = zod.object({
  'filter[tag]': zod
    .enum([
      'painting',
      'graphic',
      'sculpture',
      'folk art',
      'textile',
      'ceramics',
      'stained glass windows',
      'beads',
      'paper',
      'glass',
      'dolls',
      'jewellery',
      'fresco',
      'metal',
      'mosaic',
    ])
    .optional(),
  page: zod.string().optional(),
  perPage: zod.number().optional(),
})

export const listUserPublishedArtworksResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        title: zod.string().optional(),
        description: zod.string().optional(),
        status: zod.string().optional(),
        user_id: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artwork_likes_count: zod.number().optional(),
        artwork_comments_count: zod.number().optional(),
        artwork_main_photo_path: zod.string().optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Publish an artwork draft
 * @summary Publish Artwork
 */
export const publishArtworkResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      title: zod.string().optional(),
      description: zod.string().optional(),
      status: zod.string().optional(),
      user_id: zod.number().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
      artwork_likes_count: zod.number().optional(),
      artwork_comments_count: zod.number().optional(),
      artwork_main_photo_path: zod.string().optional(),
    })
    .optional(),
})
