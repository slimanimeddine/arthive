/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod'

/**
 * Retrieve a list of artworks favorites by the currently authenticated user
 * @summary List Authenticated User Favorite Artworks
 */
export const listAuthenticatedUserFavoriteArtworksQueryParams = zod.object({
  page: zod.number().optional(),
  perPage: zod.number().optional(),
})

export const listAuthenticatedUserFavoriteArtworksResponse = zod.object({
  data: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        title: zod.string().optional(),
        description: zod.string().optional(),
        status: zod.string().optional(),
        user_id: zod.number().optional(),
        created_at: zod.string().optional(),
        updated_at: zod.string().optional(),
        artwork_likes_count: zod.number().optional(),
        artwork_comments_count: zod.number().optional(),
        artwork_main_photo_path: zod.string().optional(),
        artwork_photos: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              path: zod.string().optional(),
              is_main: zod.number().optional(),
              artwork_id: zod.number().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
            })
          )
          .optional(),
        tags: zod
          .array(
            zod.object({
              id: zod.number().optional(),
              name: zod.string().optional(),
              created_at: zod.string().optional(),
              updated_at: zod.string().optional(),
              pivot: zod
                .object({
                  artwork_id: zod.number().optional(),
                  tag_id: zod.number().optional(),
                })
                .optional(),
            })
          )
          .optional(),
      })
    )
    .optional(),
  links: zod
    .object({
      first: zod.string().optional(),
      last: zod.string().optional(),
      prev: zod.string().optional(),
      next: zod.string().optional(),
    })
    .optional(),
  meta: zod
    .object({
      current_page: zod.number().optional(),
      from: zod.number().optional(),
      last_page: zod.number().optional(),
      links: zod
        .array(
          zod.object({
            url: zod.string().optional(),
            label: zod.string().optional(),
            active: zod.boolean().optional(),
          })
        )
        .optional(),
      path: zod.string().optional(),
      per_page: zod.number().optional(),
      to: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
})

/**
 * Mark an artwork as favorite
 * @summary Mark Artwork As Favorite
 */
export const markArtworkAsFavoriteResponse = zod.object({
  data: zod
    .object({
      id: zod.number().optional(),
      artwork_id: zod.number().optional(),
      user_id: zod.number().optional(),
      created_at: zod.string().optional(),
      updated_at: zod.string().optional(),
    })
    .optional(),
})

/**
 * Check if the currently authenticated user is favoriting an artwork
 * @summary Check if Authenticated User is Favoriting
 */
export const checkIfAuthenticatedUserIsFavoritingResponse = zod.object({
  message: zod.string().optional(),
  data: zod.boolean().optional(),
  status: zod.number().optional(),
})
