/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  LikeArtwork200,
  LikeArtwork401,
  LikeArtwork403,
  LikeArtwork404,
  ListUserReceivedLikesCountByTag200,
  ListUserReceivedLikesCountByTag404,
  ShowUserReceivedLikesCount200,
  ShowUserReceivedLikesCount404,
  UnlikeArtwork401,
  UnlikeArtwork403,
  UnlikeArtwork404,
} from '.././model'

/**
 * Retrieve the number of likes an artist has received by tag
 * @summary List User Received Likes Count by Tag
 */
export const listUserReceivedLikesCountByTag = (
  username: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListUserReceivedLikesCountByTag200>> => {
  return axios.get(
    `/api/v1/users/${username}/artwork-likes/received/count/by-tag`,
    options
  )
}

export const getListUserReceivedLikesCountByTagQueryKey = (
  username: string
) => {
  return [
    `/api/v1/users/${username}/artwork-likes/received/count/by-tag`,
  ] as const
}

export const getListUserReceivedLikesCountByTagQueryOptions = <
  TData = Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
  TError = AxiosError<ListUserReceivedLikesCountByTag404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getListUserReceivedLikesCountByTagQueryKey(username)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>
  > = ({ signal }) =>
    listUserReceivedLikesCountByTag(username, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListUserReceivedLikesCountByTagQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>
>
export type ListUserReceivedLikesCountByTagQueryError =
  AxiosError<ListUserReceivedLikesCountByTag404>

export function useListUserReceivedLikesCountByTag<
  TData = Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
  TError = AxiosError<ListUserReceivedLikesCountByTag404>,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListUserReceivedLikesCountByTag<
  TData = Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
  TError = AxiosError<ListUserReceivedLikesCountByTag404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListUserReceivedLikesCountByTag<
  TData = Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
  TError = AxiosError<ListUserReceivedLikesCountByTag404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List User Received Likes Count by Tag
 */

export function useListUserReceivedLikesCountByTag<
  TData = Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
  TError = AxiosError<ListUserReceivedLikesCountByTag404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserReceivedLikesCountByTag>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListUserReceivedLikesCountByTagQueryOptions(
    username,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve the total number of likes an artist has received
 * @summary Show User Received Likes Count
 */
export const showUserReceivedLikesCount = (
  username: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShowUserReceivedLikesCount200>> => {
  return axios.get(
    `/api/v1/users/${username}/artwork-likes/received/count`,
    options
  )
}

export const getShowUserReceivedLikesCountQueryKey = (username: string) => {
  return [`/api/v1/users/${username}/artwork-likes/received/count`] as const
}

export const getShowUserReceivedLikesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
  TError = AxiosError<ShowUserReceivedLikesCount404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getShowUserReceivedLikesCountQueryKey(username)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof showUserReceivedLikesCount>>
  > = ({ signal }) =>
    showUserReceivedLikesCount(username, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ShowUserReceivedLikesCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof showUserReceivedLikesCount>>
>
export type ShowUserReceivedLikesCountQueryError =
  AxiosError<ShowUserReceivedLikesCount404>

export function useShowUserReceivedLikesCount<
  TData = Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
  TError = AxiosError<ShowUserReceivedLikesCount404>,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowUserReceivedLikesCount<
  TData = Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
  TError = AxiosError<ShowUserReceivedLikesCount404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
          TError,
          TData
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowUserReceivedLikesCount<
  TData = Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
  TError = AxiosError<ShowUserReceivedLikesCount404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Show User Received Likes Count
 */

export function useShowUserReceivedLikesCount<
  TData = Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
  TError = AxiosError<ShowUserReceivedLikesCount404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof showUserReceivedLikesCount>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getShowUserReceivedLikesCountQueryOptions(
    username,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Like an artwork
 * @summary Like Artwork
 */
export const likeArtwork = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LikeArtwork200>> => {
  return axios.post(
    `/api/v1/artworks/${artworkId}/artwork-likes`,
    undefined,
    options
  )
}

export const getLikeArtworkMutationOptions = <
  TError = AxiosError<LikeArtwork401 | LikeArtwork403 | LikeArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof likeArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof likeArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof likeArtwork>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return likeArtwork(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LikeArtworkMutationResult = NonNullable<
  Awaited<ReturnType<typeof likeArtwork>>
>

export type LikeArtworkMutationError = AxiosError<
  LikeArtwork401 | LikeArtwork403 | LikeArtwork404
>

/**
 * @summary Like Artwork
 */
export const useLikeArtwork = <
  TError = AxiosError<LikeArtwork401 | LikeArtwork403 | LikeArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof likeArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof likeArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getLikeArtworkMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Unlike an artwork
 * @summary Unlike Artwork
 */
export const unlikeArtwork = (
  artworkId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`/api/v1/artworks/${artworkId}/artwork-likes`, options)
}

export const getUnlikeArtworkMutationOptions = <
  TError = AxiosError<UnlikeArtwork401 | UnlikeArtwork403 | UnlikeArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlikeArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlikeArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlikeArtwork>>,
    { artworkId: number }
  > = (props) => {
    const { artworkId } = props ?? {}

    return unlikeArtwork(artworkId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UnlikeArtworkMutationResult = NonNullable<
  Awaited<ReturnType<typeof unlikeArtwork>>
>

export type UnlikeArtworkMutationError = AxiosError<
  UnlikeArtwork401 | UnlikeArtwork403 | UnlikeArtwork404
>

/**
 * @summary Unlike Artwork
 */
export const useUnlikeArtwork = <
  TError = AxiosError<UnlikeArtwork401 | UnlikeArtwork403 | UnlikeArtwork404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlikeArtwork>>,
    TError,
    { artworkId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof unlikeArtwork>>,
  TError,
  { artworkId: number },
  TContext
> => {
  const mutationOptions = getUnlikeArtworkMutationOptions(options)

  return useMutation(mutationOptions)
}
