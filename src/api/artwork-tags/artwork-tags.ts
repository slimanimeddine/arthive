/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  ListTags200,
  ListUserArtworkTags200,
  ListUserArtworkTags404,
} from '.././model'

/**
 * Retrieve a list of tags used by a user's published artworks
 * @summary List User Artwork Tags
 */
export const listUserArtworkTags = (
  username: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListUserArtworkTags200>> => {
  return axios.get(`/api/v1/users/${username}/artwork-tags`, options)
}

export const getListUserArtworkTagsQueryKey = (username: string) => {
  return [`/api/v1/users/${username}/artwork-tags`] as const
}

export const getListUserArtworkTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof listUserArtworkTags>>,
  TError = AxiosError<ListUserArtworkTags404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserArtworkTags>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListUserArtworkTagsQueryKey(username)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listUserArtworkTags>>
  > = ({ signal }) => listUserArtworkTags(username, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listUserArtworkTags>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUserArtworkTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUserArtworkTags>>
>
export type ListUserArtworkTagsQueryError = AxiosError<ListUserArtworkTags404>

export function useListUserArtworkTags<
  TData = Awaited<ReturnType<typeof listUserArtworkTags>>,
  TError = AxiosError<ListUserArtworkTags404>,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserArtworkTags>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserArtworkTags>>,
          TError,
          Awaited<ReturnType<typeof listUserArtworkTags>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUserArtworkTags<
  TData = Awaited<ReturnType<typeof listUserArtworkTags>>,
  TError = AxiosError<ListUserArtworkTags404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserArtworkTags>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserArtworkTags>>,
          TError,
          Awaited<ReturnType<typeof listUserArtworkTags>>
        >,
        'initialData'
      >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListUserArtworkTags<
  TData = Awaited<ReturnType<typeof listUserArtworkTags>>,
  TError = AxiosError<ListUserArtworkTags404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserArtworkTags>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List User Artwork Tags
 */

export function useListUserArtworkTags<
  TData = Awaited<ReturnType<typeof listUserArtworkTags>>,
  TError = AxiosError<ListUserArtworkTags404>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listUserArtworkTags>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListUserArtworkTagsQueryOptions(username, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Retrieve a list of all tags
 * @summary List Tags
 */
export const listTags = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListTags200>> => {
  return axios.get(`/api/v1/tags`, options)
}

export const getListTagsQueryKey = () => {
  return [`/api/v1/tags`] as const
}

export const getListTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof listTags>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTags>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListTagsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTags>>> = ({
    signal,
  }) => listTags({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTags>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTags>>
>
export type ListTagsQueryError = AxiosError<unknown>

export function useListTags<
  TData = Awaited<ReturnType<typeof listTags>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTags>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listTags>>,
        TError,
        Awaited<ReturnType<typeof listTags>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListTags<
  TData = Awaited<ReturnType<typeof listTags>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTags>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listTags>>,
        TError,
        Awaited<ReturnType<typeof listTags>>
      >,
      'initialData'
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListTags<
  TData = Awaited<ReturnType<typeof listTags>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTags>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List Tags
 */

export function useListTags<
  TData = Awaited<ReturnType<typeof listTags>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTags>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListTagsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
