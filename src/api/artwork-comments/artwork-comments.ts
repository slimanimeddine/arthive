/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ArtHive API Documentation
 * ArtHive API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import axios from '@/lib/axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import type {
  DeleteArtworkComment401,
  DeleteArtworkComment403,
  DeleteArtworkComment404,
  PostArtworkComment200,
  PostArtworkComment401,
  PostArtworkComment403,
  PostArtworkComment404,
  PostArtworkCommentBody,
  UpdateArtworkComment200,
  UpdateArtworkComment401,
  UpdateArtworkComment403,
  UpdateArtworkComment404,
  UpdateArtworkCommentBody,
} from '.././model'

/**
 * Post a comment on an artwork
 * @summary Post Artwork Comment
 */
export const postArtworkComment = (
  artworkId: number,
  postArtworkCommentBody: PostArtworkCommentBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PostArtworkComment200>> => {
  return axios.post(
    `/api/v1/artworks/${artworkId}/artwork-comments`,
    postArtworkCommentBody,
    options
  )
}

export const getPostArtworkCommentMutationOptions = <
  TError = AxiosError<
    PostArtworkComment401 | PostArtworkComment403 | PostArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArtworkComment>>,
    TError,
    { artworkId: number; data: PostArtworkCommentBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postArtworkComment>>,
  TError,
  { artworkId: number; data: PostArtworkCommentBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postArtworkComment>>,
    { artworkId: number; data: PostArtworkCommentBody }
  > = (props) => {
    const { artworkId, data } = props ?? {}

    return postArtworkComment(artworkId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostArtworkCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postArtworkComment>>
>
export type PostArtworkCommentMutationBody = PostArtworkCommentBody
export type PostArtworkCommentMutationError = AxiosError<
  PostArtworkComment401 | PostArtworkComment403 | PostArtworkComment404
>

/**
 * @summary Post Artwork Comment
 */
export const usePostArtworkComment = <
  TError = AxiosError<
    PostArtworkComment401 | PostArtworkComment403 | PostArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArtworkComment>>,
    TError,
    { artworkId: number; data: PostArtworkCommentBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof postArtworkComment>>,
  TError,
  { artworkId: number; data: PostArtworkCommentBody },
  TContext
> => {
  const mutationOptions = getPostArtworkCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Delete a comment on an artwork
 * @summary Delete Artwork Comment
 */
export const deleteArtworkComment = (
  artworkCommentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`/api/v1/artwork-comments/${artworkCommentId}`, options)
}

export const getDeleteArtworkCommentMutationOptions = <
  TError = AxiosError<
    DeleteArtworkComment401 | DeleteArtworkComment403 | DeleteArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtworkComment>>,
    TError,
    { artworkCommentId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArtworkComment>>,
  TError,
  { artworkCommentId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArtworkComment>>,
    { artworkCommentId: number }
  > = (props) => {
    const { artworkCommentId } = props ?? {}

    return deleteArtworkComment(artworkCommentId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArtworkCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArtworkComment>>
>

export type DeleteArtworkCommentMutationError = AxiosError<
  DeleteArtworkComment401 | DeleteArtworkComment403 | DeleteArtworkComment404
>

/**
 * @summary Delete Artwork Comment
 */
export const useDeleteArtworkComment = <
  TError = AxiosError<
    DeleteArtworkComment401 | DeleteArtworkComment403 | DeleteArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtworkComment>>,
    TError,
    { artworkCommentId: number },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteArtworkComment>>,
  TError,
  { artworkCommentId: number },
  TContext
> => {
  const mutationOptions = getDeleteArtworkCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Update a comment on an artwork
 * @summary Update Artwork Comment
 */
export const updateArtworkComment = (
  artworkCommentId: number,
  updateArtworkCommentBody: UpdateArtworkCommentBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UpdateArtworkComment200>> => {
  return axios.put(
    `/api/v1/artwork-comments/${artworkCommentId}`,
    updateArtworkCommentBody,
    options
  )
}

export const getUpdateArtworkCommentMutationOptions = <
  TError = AxiosError<
    UpdateArtworkComment401 | UpdateArtworkComment403 | UpdateArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtworkComment>>,
    TError,
    { artworkCommentId: number; data: UpdateArtworkCommentBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArtworkComment>>,
  TError,
  { artworkCommentId: number; data: UpdateArtworkCommentBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArtworkComment>>,
    { artworkCommentId: number; data: UpdateArtworkCommentBody }
  > = (props) => {
    const { artworkCommentId, data } = props ?? {}

    return updateArtworkComment(artworkCommentId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateArtworkCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateArtworkComment>>
>
export type UpdateArtworkCommentMutationBody = UpdateArtworkCommentBody
export type UpdateArtworkCommentMutationError = AxiosError<
  UpdateArtworkComment401 | UpdateArtworkComment403 | UpdateArtworkComment404
>

/**
 * @summary Update Artwork Comment
 */
export const useUpdateArtworkComment = <
  TError = AxiosError<
    UpdateArtworkComment401 | UpdateArtworkComment403 | UpdateArtworkComment404
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtworkComment>>,
    TError,
    { artworkCommentId: number; data: UpdateArtworkCommentBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateArtworkComment>>,
  TError,
  { artworkCommentId: number; data: UpdateArtworkCommentBody },
  TContext
> => {
  const mutationOptions = getUpdateArtworkCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
